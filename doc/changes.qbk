[section Changes]

[h1 Changes from 0.3 to 0.4]

[h2 New functionality]

* Support clang.

[h3 Algorithm]
* Added `shift_compare` to test if two sequences are equal in a sense that one can be shifted to match the other.
* Added `map` that operate on ranges.

[h3 Chrono]
* Renamed `monotonic_clock` into `steady_clock` to follow the latest draft.

[h3 Container]
* Added a new container called `grid::object`. It is a very simple multi dimensional array.
* A lot of functions have been added that can directly be used with `unique_ptrs` and `Boost ptr_containers`.
* Added a container `array` based on `std::array`.

[h3 Filesystem]
* Support boost filesystem v3. This will be the default if your boost version is new enough.
* `path_to_string` has been added which has to be used instead of `path::string`.

[h3 Math]
* Added `extend_bounding_box` which resizes a box to include the given point.
* Added `vector::slerp` which does spherical linear interpolation.
* Added `dim::quad`.
* Added all relational operators for `vector` and `dim` (`<`, `>`, `<=`, `>=`).
* Added `range_compare` to compare two ranges with an epsilon.
* Added `vector::orthogonalize` which implements a (numerically stable) Gram-Schmidt orthonormalization.
* Added `vector::project`.
* Generalized `vector::angle_between`. It now has a different meaning and uses the dot product.
* Added `vector::angle_between_cast` which can be used on integral vectors.
* Added `vector::signed_angle` that computes the angle of a vector relative to `(1, 0)`.
* Added `matrix::orthogonal` which specifies a general orthogonal projection matrix (it imitates glOrtho)
* Added `ceil_div` to round a division towards infinity.
* Added `dim::fill` to fill a dim with the same values.
* Added `lerp` function which does linear interpolation.

[h3 mpl]
* Added a static `ceil_div`.

[h3 Optional]
* Added `optional::has_value` to simply check if an `optional` has been set.
* Added `empty_optional` that can be used for any type of `optional`.

[h3 Signal]
* Changed `signal::object` to support different base classes.
* Added `signal::unregister::base` which can be used for notifications when a connection is destroyed.

[h3 Strong typedef]
* Added `get` member function.

[h3 Type traits]
* Added `is_unique_ptr`.
* Added `GENERATE_HAS_MEMBER_FUNCTION` and `GENERATE_HAS_TYPE` to create new type traits that check for a member function or typedef respectively.
* Added `is_iterable` that checks if `iterator` and `const_iterator` typedefs are there.

[h3 unique_ptr]
* A `unique_ptr` class based on Howard Hinannt's `unique_ptr` implementation has been added.

[h3 Variant]
* Added `operator==` and `operator!=`

[h3 Other]
* Added `scoped_state_machine`.

[h2 Removed functionality]
* Removed `log::global_context` as it was not needed by anything.
* `auto_ptr` is no longer supported. `unique_ptr` should be used instead.
* Removed `vector::cross` for 2D vectors.
* Removed `assign::multi_array`.
* Removed `<fcppt/tr1/array.hpp>`.

[h2 Bugfixes]
* Made more functions reentrant for the logger.
* Ensure that a type deleted by `heap_deleter` is complete.
* Fixed `container::tree::object::release()`.
* Fixed an ADL failure in `function`.
* Don't put generated files in the source dir anymore (like `config.hpp`).
* Fixed a lot of warnings generated by clang and by -Wshadow.
* Fixed a severe memory leak in `signal::connection`.
* Fixed `math::dim::content` to properly return a `value_type` and not a `size_type`.
* `fcppt::signal::object<T>` (with `T!=void`) now properly folds the values returned by the callbacks and needs an initial result.

[h1 Changes from 0.2 to 0.3]

* Added source groups for Visual Studio to make the generated project file actually useable. This will only work for Visual Studio 2010 if you use cmake-2.8.2 or later.
* Removed the `FUNCTION_ONCE` macro. Static data members essentially make functions non reentrant, which is bad.
* Fixed the `is_iterator` template. Thanks to Dodheim from #boost.
* Added `variant::holds_type` to check whether a `variant::object` currently holds an object of a given type, and `variant::object::reset` to clear the variant.
* Fixed `matrix::perspective` and `matrix::look_at`.
* Added `box::stretch` to stretch a box around its center, and `box::center`.
* Changed the meaning of `matrix[i][j]` to be `[row][column]` to avoid confusion. As a side effect, the associativety of `matrix * matrix` has been reversed.
* `matrix::delete_column_and_row` has been renamed to `matrix::delete_row_and_column`.

[h1 Changes from 0.1 to 0.2]

* Made all exceptions inline, so header only parts can be used without linking.
* All string conversion functions now take an optional `std::locale` parameter (`from_std_string`, `to_std_string`, `narrow` and `widen`).
* Removed `container::field`. `boost::multi_array` should be used instead.
* Changed a lot of functions for `vector`, `dim` and `matrix` to be safe with different storage types.
* The `cctor`, `operator=` and `dtor` of `vector`, `dim` and `matrix` are now defined in the corresponding `basic_impl.hpp` file.
* Removed the `resize` functions from `vector`, `dim` and `matrix`. Resizing their dynamic versions should be done via assignment instead.
* Moved the comparison functions (`operator==` and `operator!=`) of `vector`, `dim` and `matrix` into their own headers. For example `vector` needs `<fcppt/math/vector/comparison.hpp>`.
* Fixed building and using fcppt statically with VC++.
* Building a static library and linking statically when using FindFcppt is now the default for VC++.
* Removed some lazy initializations to make functions reentrant (chrono's now() functions and endianness test functions).
* Added `math::matrix::has_dim` to statically check if a matrix has a given dimension.
* Added `adjugate`, `determinant` and `inverse` for `math::matrix`.
* Added `math::matrix::delete_column_and_row` to create a matrix that has one row and column less.
* Fixed a bug in `math::matrix::rotation_y`.
* Updated the alignment macros not to use `BOOST_PP` if this isn't required.
* Added quaternion functions that can be used with `boost::math::quaternion`, see the documentation.
* Added `time::std_time()` to wrap `std::time()`. Also added `time::parse_time` and `time::parse_date` to ease the use of the locale parsing functions.
* Added `algorithm::set_intersection` that wraps `std::set_intersection`.
* Added `is_subset_eq` for `container::bitfield`.
* Added `filesystem::extension_without_dot`.
* Added `math::vector::unit_circle` to construct a unit vector from an angle.
* Refactored some `math` implementation macros so Doxygen gets less confused.
* Added more test cases.

[h2 Changes from 0.1 to 0.1.1]

* Added `static.hpp` and `dynamic.hpp` to the linear algebra convenience headers (`vector/vector.hpp`, `dim/dim.hpp`, `matrix/matrix.hpp`).
* Added `matrix::rotation_axis` - A function that calculates a matrix for rotation around an arbitrary axis.
* Added `homogenous_pair` - A class like `std::pair`, but its two elements are of the same type.
* Lowered the minimal required boost version to 1.40.
* Fixed a bug in the FindFcppt.cmake script.
* Fixed some spelling errors in the documentation.
* Corrected the git URL.

[endsect]
