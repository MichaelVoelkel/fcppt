[section Changes]

[section Changes from 0.8 to 0.9]

[section Added functionality]

* Added optional `ptr_container` semantics to `container::tree`, including release support.
* Added `container::tree::print` to easily print a tree with indentation.
* Added `math::vector::unit` which returns the unit vector for a given axis.
* Added `container::grid::fill` to fill a grid with a specific value.
* Added `value_type` typedef to `minmax_pair`.
* Added `container::ptr::replace_unique_ptr` to replace a value by a new unique_ptr.
* Added `fcppt::cref` in complement to `fcppt::ref`.
* Added `algorithm::array_map` which is like `algorithm::map` but can be used for static containers.
* Added `time::output_tm` to print an `std::tm` via a locale.
* Added `time::gmtime` and `time::localtime` to wrap the std variants.
* Added proper deep copying semantics to `container::tree`.
* Added `math::vector::transform` and `math::dim::transform` which apply a function on every element.
* Added `container::grid::in_range` to check if a given point is inside the grid's dimensions.
* Added `container::grid::object::empty`.
* Added `container::grid::dim` to factor out the dim typedef.
* Added custom installation directories for includes, libraries, documentation, pkgconfig files and cmake modules.

[endsect]

[section Changed functionality]

* `math::vector::orthogonalize` now takes iterators.
* `container::tree::object<T>::value_type` is now `T`.
* FindFcppt.cmake's variable names have changed to conform to cmake find modules.
* `make_unique_ptr` and `make_shared_ptr` now take everything by value. Use `ref` or `cref` when needed.

[endsect]

[section Removed functionality]

* Removed `linear_map` and `linear_set`.
* Removed macros from `workarounds.hpp` that are no longer needed.
* Removed `RESTRICT_TYPEDEF_STRUCT` as it prevents inlining under VC++.

[endsect]

[section Bugfixes]

* Fixed `-fvisbility=hidden`.
* Fixed copying and assigning of `container::tree`.
* Removed `BOOST_FOREACH` because it has issues with gcc-4.6 in boost-1.46.1.
* Made the converting constructor of `container::bitfield::iterator` public.
* Made `FindFcppt.cmake` more conformant to cmake find modules.

[endsect]

[endsect]

[section Older changes]

[section Changes from 0.7.1 to 0.8]

[section Added functionality]

* Added `math::matrix::orthogonal` with a `math::box` parameter.
* Added `FcpptCMakeUtils.cmake` that helps implement some of our other projects as well.
* Added `filesystem::remove_extension`.
* Added convenience headers for every subdirectory, e.g. `<fcppt/math/math.hpp>`.
* Added comparison operators for `container::array`.
* Added `chrono::asio::deadline_timer` and helper functions to work with chrono and `boost::asio::deadline_timer` directly.
* Added `container()` function to `container::make_array` in addition to the implicit conversion.
* Added a lot of operators to `strong_typedef`.
* Added `filesystem::file_size` and `filesystem::file_to_string`.
* Added `first_type` and `second_type` typedefs to `homogenous_pair` so it behaves more like `std::pair`.

[endsect]

[section Changed functionality]

* Removed `EXTRA_CMAKE_MODULE_PATH`. Set `CMAKE_MODULE_PATH` directly instead.
* Moved the platform macros out of `<fcppt/config.hpp>` into `<fcppt/platform.hpp>`.

[endsect]

[section Removed functionality]

* Removed `math::abs_angle_to_rel` because it was broken and not really useful.
* Removed `math::is_rel_angle` as well.

[endsect]

[section Bugfixes]

* Fixed some warnings from `-Wsign-conversion`.
* Fixed support for gcc's `pragma message`.
* Removed useless overload of `fcppt::dynamic_cast_`.
* Fixed `operator--` of `cyclic_iterator`.

[endsect]

[endsect]

[section Changes from 0.7 to 0.7.1]

* Added `math::vector::hypersphere_to_cartesian`.
* Added empty `log::location` constructor which was previously missing.
* Added `fcppt::ref` which wraps `boost::ref` and `fcppt::reference_wrapper` which wraps `boost::reference_wrapper`, because `std::tr1::ref` has issues on VC++ 2010 SP1.
* Added missing tr1 headers to `fcppt/tr1` (namely `array`, `cmath`, `complex`, `memory`, `regex`, `tuple`, `type_traits`, `unordered_map`, `unordered_set` and `utility`).
* Fixed a bug in `src/codecvt.hpp`. This hopefully fixes `fcppt::widen`, `fcppt::narrow` and all the other functions that make use of them.

[endsect]

[section Changes from 0.6 to 0.7]

[section Added functionality]

* Added `fcppt::log::level::verbose` and `FCPPT_LOG_VERBOSE`.
* Added `io::raw_container_source` which is like `boost::iostreams::array_source` but owns the container instead.
* Added `default_locale` function that does something sane on POSIX systems.
* All string conversion functions now take `default_locale` as their locale parameter by default.
* Added missing locale parameters to `from_std_wstring` and `to_std_wstring`.
* Added `math::interpolation::linear` and `math::interpolation::trigonometric`.
* Added `cyclic_iterator`.
* Added `operator>>` for `strong_typedef`.

[endsect]

[section Changed functionality]

* Put fcppt's libraries into ${CMAKE_BINARY_DIR}/lib.
* Changed `dimension()` to `size()` in `math::box` and `container::grid`.

[endsect]

[section Bugfixes]

* Fixed a leak with `raw_vectors` that had a size of zero.
* Added a missing include in `math/box/has_dim.hpp`.
* Don't call `Release()` on null pointers in `com_deleter`.
* Added a workaround for compilation of `shift_compare` for boost-1.43.0.
* Fixed `mach_time` so that `chrono` works properly on MacOS.
* Fixed some warnings encountered on MacOS.

[endsect]

[endsect]

[section Changes from 0.5 to 0.6]

[section Added functionality]

* Added `operator==` and `operator!=` for `fcppt::optional`.
* Added `operator!=` for `strong_typedef`.
* Added `math::generate_binary_vectors`, which, given a dimension, returns an array of all the vectors with components in {0,1}.
* Added `math::box::corner_points`, which returns the box' vertices.
* `algorithm::ptr_container_erase` works with pointers to const T as well.

[endsect]

[section Changed functionality]

* `FCPPT_PP_FUNCTION` now returns a literal instead of a string.
* Some macros now require a `;` after them, namely
  * `FCPPT_NONCOPYABLE`
  * `FCPPT_NONASSIGNABLE`
  * `FCPPT_ASSERT_COMPLETE`
  * `FCPPT_MAKE_STRONG_TYPEDEF`
  * `FCPPT_ASSERT`
  * `FCPPT_ASSERT_MESSAGE`
  * `FCPPT_RESTRICT_TYPEDEF_STRUCT`
* `FCPPT_RESTRICT_TYPEDEF_STRUCT` now makes the constructor, destructor, copy constructor and assignment operator private.
* `strong_typedef` no longer automatically converts into its underlying type.

[endsect]

[section Bugfixes]

* `fcppt::make_shared_ptr` is now a wrapper around `boost::make_shared` which improves performance.
* Fixed `variant::apply_ternary` which was previously broken.
* Fixed `math::vector::angle_between`.

[endsect]

[endsect]

[section Changes from 0.4 to 0.5]

[section New functionality]

* Added `signal::connection_manager:assign`.
* `FindFcppt.cmake` is now installed into `${CMAKE_INSTALL_PREFIX}/share/cmake/Modules`.
* Added `type_traits::is_input_iterator`.
* Added `EXTRA_CMAKE_MODULE_PATH` variable to extend the module path for fcppt.
* Added `algorithm::remove` and `algorithm::remove_if` to wrap `std::remove_if` and `std::remove_if`.
* Added `algorithm::ptr_container_erase_if`.
* Added `math::box::has_dim` metafunction.
* Added support for gcc-4.6's `pragma GCC diagnostic`.

[endsect]

[section Bugfixes]

* Removed hard coded `Boost_USE_STATIC_LIBS` from the CMakeLists.
* Fixed `container::raw_vector::insert` with Input Iterators.
* Fixed `container::raw_vector::insert` for empty ranges.
* Don't use GLOBS in the CMakeLists anymore.

[endsect]

[endsect]

[section Changes from 0.3 to 0.4]

[section New functionality]

* Support clang.

[h3 Algorithm]
* Added `shift_compare` to test if two sequences are equal in a sense that one can be shifted to match the other.
* Added `map` function which is a copying transform.

[h3 Assign]
* Added `container` member function to `make_container`.

[h3 Chrono]
* Renamed `monotonic_clock` into `steady_clock` to follow the latest C++0x draft.

[h3 Container]
* Added a new container called `grid::object`. It is a very simple multi dimensional array.
* A lot of functions have been added that can directly be used with `unique_ptrs` and `Boost ptr_containers`.
* Added a container `array` based on `std::array`.

[h3 Filesystem]
* Support boost filesystem v3. This will be the default if your boost version is new enough.
* `path_to_string` has been added which has to be used instead of `path::string`.

[h3 Math]
* Added `extend_bounding_box` which resizes a box to include the given point.
* Added `vector::slerp` which does spherical linear interpolation.
* Added `dim::quad`.
* Added all relational operators for `vector` and `dim` (`<`, `>`, `<=`, `>=`).
* Added `range_compare` to compare two ranges with an epsilon.
* Added `vector::orthogonalize` which implements a (numerically stable) Gram-Schmidt orthonormalization.
* Added `vector::project`.
* Generalized `vector::angle_between`. It now has a different meaning and uses the dot product.
* Added `vector::angle_between_cast` which can be used on integral vectors.
* Added `vector::signed_angle` that computes the angle of a vector relative to `(1, 0)`.
* Added `matrix::orthogonal` which specifies a general orthogonal projection matrix (it imitates glOrtho).
* Added `ceil_div` to round a division towards infinity.
* Added `dim::fill` to fill a dim with the same values.
* Added `lerp` function which does linear interpolation.

[h3 mpl]
* Added a static `ceil_div`.

[h3 Optional]
* Added `optional::has_value` to simply check if an `optional` has been set.
* Added `empty_optional` that can be used for any type of `optional`.

[h3 Signal]
* Changed `signal::object` to support different base classes.
* Added `signal::unregister::base` which can be used for notifications when a connection is destroyed.

[h3 Strong typedef]
* Added `get` member function.

[h3 Type traits]
* Added `is_unique_ptr`.
* Added `GENERATE_HAS_MEMBER_FUNCTION` and `GENERATE_HAS_TYPE` to create new type traits that check for a member function or typedef respectively.
* Added `is_iterable` that checks if `iterator` and `const_iterator` typedefs are there.

[h3 unique_ptr]
* A `unique_ptr` class based on Howard Hinannt's `unique_ptr` implementation has been added.

[h3 Variant]
* Added `operator==` and `operator!=`

[h3 Other]
* Added `scoped_state_machine`.

[endsect]

[section Removed functionality]

* Removed `log::global_context` as it was not needed by anything.
* `auto_ptr` is no longer supported. `unique_ptr` should be used instead.
* Removed `vector::cross` for 2D vectors.
* Removed `assign::multi_array`.
* Removed `<fcppt/tr1/array.hpp>`.

[endsect]

[section Bugfixes]

* Made more functions reentrant for the logger.
* Ensure that a type deleted by `heap_deleter` is complete.
* Fixed `container::tree::object::release()`.
* Fixed an ADL failure in `function`.
* Don't put generated files in the source dir anymore (like `config.hpp`).
* Fixed a lot of warnings generated by clang and by -Wshadow.
* Fixed a severe memory leak in `signal::connection`.
* Fixed `math::dim::content` to properly return a `value_type` and not a `size_type`.
* `fcppt::signal::object<T>` (with `T!=void`) now properly folds the values returned by the callbacks and needs an initial result.

[endsect]

[endsect]

[section Changes from 0.2 to 0.3]

* Added source groups for Visual Studio to make the generated project file actually useable. This will only work for Visual Studio 2010 if you use cmake-2.8.2 or later.
* Removed the `FUNCTION_ONCE` macro. Static data members essentially make functions non reentrant, which is bad.
* Fixed the `is_iterator` template. Thanks to Dodheim from #boost.
* Added `variant::holds_type` to check whether a `variant::object` currently holds an object of a given type, and `variant::object::reset` to clear the variant.
* Fixed `matrix::perspective` and `matrix::look_at`.
* Added `box::stretch` to stretch a box around its center, and `box::center`.
* Changed the meaning of `matrix[i][j]` to be `[row][column]` to avoid confusion. As a side effect, the associativety of `matrix * matrix` has been reversed.
* `matrix::delete_column_and_row` has been renamed to `matrix::delete_row_and_column`.

[endsect]

[section Changes from 0.1 to 0.2]

* Made all exceptions inline, so header only parts can be used without linking.
* All string conversion functions now take an optional `std::locale` parameter (`from_std_string`, `to_std_string`, `narrow` and `widen`).
* Removed `container::field`. `boost::multi_array` should be used instead.
* Changed a lot of functions for `vector`, `dim` and `matrix` to be safe with different storage types.
* The `cctor`, `operator=` and `dtor` of `vector`, `dim` and `matrix` are now defined in the corresponding `basic_impl.hpp` file.
* Removed the `resize` functions from `vector`, `dim` and `matrix`. Resizing their dynamic versions should be done via assignment instead.
* Moved the comparison functions (`operator==` and `operator!=`) of `vector`, `dim` and `matrix` into their own headers. For example `vector` needs `<fcppt/math/vector/comparison.hpp>`.
* Fixed building and using fcppt statically with VC++.
* Building a static library and linking statically when using FindFcppt is now the default for VC++.
* Removed some lazy initializations to make functions reentrant (chrono's now() functions and endianness test functions).
* Added `math::matrix::has_dim` to statically check if a matrix has a given dimension.
* Added `adjugate`, `determinant` and `inverse` for `math::matrix`.
* Added `math::matrix::delete_column_and_row` to create a matrix that has one row and column less.
* Fixed a bug in `math::matrix::rotation_y`.
* Updated the alignment macros not to use `BOOST_PP` if this isn't required.
* Added quaternion functions that can be used with `boost::math::quaternion`, see the documentation.
* Added `time::std_time()` to wrap `std::time()`. Also added `time::parse_time` and `time::parse_date` to ease the use of the locale parsing functions.
* Added `algorithm::set_intersection` that wraps `std::set_intersection`.
* Added `is_subset_eq` for `container::bitfield`.
* Added `filesystem::extension_without_dot`.
* Added `math::vector::unit_circle` to construct a unit vector from an angle.
* Refactored some `math` implementation macros so Doxygen gets less confused.
* Added more test cases.

[endsect]

[section Changes from 0.1 to 0.1.1]

* Added `static.hpp` and `dynamic.hpp` to the linear algebra convenience headers (`vector/vector.hpp`, `dim/dim.hpp`, `matrix/matrix.hpp`).
* Added `matrix::rotation_axis` - A function that calculates a matrix for rotation around an arbitrary axis.
* Added `homogenous_pair` - A class like `std::pair`, but its two elements are of the same type.
* Lowered the minimal required boost version to 1.40.
* Fixed a bug in the FindFcppt.cmake script.
* Fixed some spelling errors in the documentation.
* Corrected the git URL.

[endsect]

[endsect]

[endsect]
