[section Overview]

So what is provided by fcppt?

[variablelist

[[algorithm]
[
Some general utility algorithms like `append`, `copy_n`, `find_if_exn`, and so on.
]]

[[alignment]
[
Compiler specific alignment macros. Also has alignment::array that can be used
to implement raw buffers for placement new.
]]

[[assign]
[
Container assignment utilities that can be used to directly initialize a container.
]]

[[char_type abstraction]
[
fcppt's char_type depends on the platform. It is `char` for POSIX systems
and `wchar_t` for VC++. This means that fcppt has its own functions and typedefs
for anything that needs a char or a string.
]]

[[chrono]
[
fcppt provides a full implementation of C++0x's chrono.
]]

[[container]
[
Some additional containers like `bitfield`, `raw_vector` and `tree`.
]]

[[logger]
[
Hierarchical logger classes with log levels, formatters and dynamic log manipulation.
]]

[[math]
[
Some math utility functions, linear algebra classes `vector` and `matrix`, a `dim` class,
the geometric classes `sphere` and `box`.
]]

[[mpl]
[
Some mpl metafunctions like a better `for_each`, `implication`, `partial_sums`, and so on.
]]

[[optional]
[
The `optional` class also doesn't use an undefined "union trick".
]]

[[smart pointers]
[
Wrapper around `shared_ptr`, `scoped_ptr` and `weak_ptr` that use a deleter as template argument.
]]

[[random]
[
Helper classes for `tr1::random`.
]]

[[tr1]
[
Include wrappers for tr1 headers (VC++ uses `<header>` but gcc uses `<tr1/header>`).
]]

[[variant]
[
fcppt's variant class is similar to the variant provided by boost.
The differences are that it doesn't use an undefined "union trick",
it can be empty (which means that the first type doesn't have to be default constructible),
its types are implemented with an mpl sequence directly and it offers up to ternary visitation.
]]

]

[endsect]
