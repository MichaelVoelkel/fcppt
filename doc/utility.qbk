[section Utility]

[section Assertions]

The C standard library macro `assert` (defined in `<cassert>`) doesn't throw an exception if the given condition isn't satisfied. Instead, `abort()` is called and all destructors are ignored. This can leave the system in a suboptimal state. Imagine a full screen renderer which doesn't change the videomode after a crash, leaving you with garbled video output.

To remedy this situation, there are `FCPPT_ASSERT` and `FCPPT_ASSERT_MESSAGE`. These macros will throw `fcppt::assertion_failed` instead of aborting the program abruply. Here's a small example:

[import ../examples/assert.cpp]
[assert]

Note that the asserts are still macros, because they use the `__LINE__` and `__FILE__` constants internally.

Note also that it is currently impossible to deactivate assertions via a preprocessor directive and it is disputed if that will ever be possible.
[endsect]

[section Assign]

This part of fcppt is similar to boost::assign, but fixes one issue: Why is there `list_of`, which has a Method `to_adapter`? Why not just a single templated `make_container` function? This is exactly what `fcppt::assign` consists of. It even works for associative containers (like `std::map` or `std::set`). It uses `fcppt::container::is_associative` to determine if a container is really an associative container and if so, uses `insert` instead of `push_back`. Here is an example:

[import ../examples/make_container.cpp]
[make_container]

There's also `assign::make_array` which can be used to construct an `std::tr1::array`, whose size is determined by the how many elements you call `make_array` with. Here's an example which should explain everything:

[import ../examples/make_array.cpp]
[make_array]

[endsect]
[endsect]
