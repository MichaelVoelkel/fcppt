[section Log]

[section Hello World]
Let's first start with an hello world example.

[import ../examples/log/helloworld.cpp]
[loghelloworld]

A logger object is constructed using the parameters::root class.
This logger will be a root logger which means that it won't inherit another one's properties.
fcppt::log::_ is an output helper object. FCPPT_LOG_DEBUG is a helper macro so you don't
have to write
``
if(logger.activated(fcppt::log::level::debug))
  do_the_logging();
``
[endsect]

[section Inheritance]
A logger can inherit from another logger to form a hierarchy.

[import ../examples/log/inheritance.cpp]
[loginheritance]

[endsect]

[section Contexts]
A context is a class that can be given to a logger that has a location.
parameters::all and parameters::inherited implicitly construct a location for a logger.

[import ../examples/log/context.cpp]
[logcontext]

The logger context has an apply function to apply an action to loggers recursively
starting with the specified location. The statement will activate all loggers
starting from root::child and beneath.
This can be used to enable or disable loggers or log levels at runtime in an easy way.

[endsect]

[section A complex example]

Here is a complex example on how a library could use different loggers for different namespaces.

[import ../examples/log/complex.cpp]

[logcomplex]

[endsect]

[xinclude doxygen_log.xml]

[endsect]
