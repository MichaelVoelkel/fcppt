/**
\mainpage Overview

\section main_introduction Introduction

Freundlich's C++ Toolkit (fcppt) is a collection of libraries that aim
to improve general C++ code through better typing and functional programming.

Here are a few quick examples that illustrate what we mean by that:

Avoiding partial functions (functions that do not terminate, i.e. crash, on certain inputs)
is one of fcppt's main goals. These are, unfortunately, all over the place in common C or C++ code:
<code>std::unique_ptr</code> can be null, <code>operator[]</code> of <code>std::vector</code>
can be used for out-of-bounds access, Iterators can be incremented past their end, and so on.
Partial functions place a huge burden on the programmer since they have to ensure that
no code path is taken that actually calls a function with invalid arguments.
Consider the following function:

\snippet main.cpp print_at_2

The \link fcppt::container::at_optional\endlink function returns an optional reference
into the container, which the \link fcppt::optional::maybe\endlink function uses to either
print the value or print that no element at position <code>2</code> exists.
Notice that we, at no point, call a partial function: We do not ask explicitly if the
optional has a value or dereference it (which can crash if the value is null).

Explicit loops are another source of mistakes: The loop not only specifies what
to loop over but also how the result is formed. What to loop over is best expressed
using ranges, while forming the result can be expressed using
special algorithms. A very common operation is mapping one container into another:

\snippet main.cpp vec_to_string

Code using a standard loop would allocate an empty vector and then use <code>push_back</code>
repeatedly. For good performance, it should also call <Code>reserve</code> before
the first <code>push_back</code>. All of this is nicely encapsulated in \link fcppt::algorithm::map\endlink,
so that you only have to focus on how to transform <em>a single element</em> into another.

This also brings us to the next point, which is initialization. It is important to directly
initialize objects and declare them as <code>const</code> as often as you can.
Obviously you cannot do that with loops that change their result in each iteration, like by
calling <code>push_back</code>. There are, however, even more complicated cases in which
direct initializtion becomes hard to express: Consider a <code>std::array</code> that
should be initialized <em>depending on its size</em>. For simplicity, lets initialize
each element with its index:

\snippet main.cpp init_array

Notice that the parameter <em>_index</em> is actually an integral constant, which we
use to access the <code>make_value</code> template.

This concludes the introduction, but there is a lot more to explore. Here are a few examples:
<ul>
<li>\ref fcppteither and \ref fcpptvariant. Either is an extension of Optional, since it either carries a success or an error value,
while optional either carries a success value or nothing. Variant is an arbitrary sum type (which carries a value of one type out
of a fixed set of types).</li>
<li>\ref fcpptoptions provides declarative command-line option parsers, similar to Haskell's <code>optparse-applicative</code> library.</li>
<li>\ref fcpptenum is an extensive library to deal with enumerations, for example to iterate over them, convert them from
and to strings, create arrays that are indexed by enums, and so on.</li>
</ul>

For more techincal details, you can also take a look at our \ref code_style.

\section main_sitemap Site map

The documentation is split into the following parts:

<table id="toc">
<tr>
<td>

<ul>
	<li>
		\link fcpptmain Documentation \endlink
	</li>
	<li>
		\subpage requirements_download_installation
		<ul>
			<li>\ref requirements_download_installation_requirements</li>
			<li>\ref requirements_download_installation_tested_platforms</li>
			<li>\ref requirements_download_installation_download</li>
			<li>\ref requirements_download_installation_building_and_installation</li>
			<li>\ref requirements_download_installation_using_fcppt</li>
			<li>\ref requirements_download_installation_static_and_shared_builds</li>
		</ul>
	</li>
	<li>
		\subpage code_style
	</li>
	<li>
		\subpage changes
		<ul>
			<li>\ref changes_changes_to_260</li>
			<li>\ref changes_changes_to_251</li>
			<li>\ref changes_changes_to_250</li>
			<li>\ref changes_changes_to_241</li>
			<li>\ref changes_changes_to_240</li>
			<li>\ref changes_changes_to_230</li>
			<li>\ref changes_changes_to_220</li>
			<li>\ref changes_changes_to_210</li>
			<li>\ref changes_changes_to_200</li>
			<li>\ref older_changes</li>
		</ul>
	</li>
</ul>

</td>
</tr>
</table>

\section main_contact Contact

You can contact us via our IRC channel

<code>\verbatim #sge-sanguis \endverbatim</code>

at

<code>\verbatim irc.freenode.net \endverbatim</code>

If you've found a bug or want to request something, please head over to the <a
href="https://github.com/freundlich/fcppt/issues">github issue tracker</a> and
create an issue.
*/
