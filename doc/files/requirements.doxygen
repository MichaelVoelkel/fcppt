/**
\page requirements_download_installation Requirements, Download and Installation

\section requirements_download_installation_contents Contents

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref requirements_download_installation_requirements</li>
	<li>\ref requirements_download_installation_tested_platforms</li>
	<li>\ref requirements_download_installation_download</li>
	<li>\ref requirements_download_installation_building_and_installation</li>
	<li>
	\ref requirements_download_installation_using_fcppt
		<ul>
			<li>\ref requirements_download_installation_using_fcppt_using_another_build_tool</li>
			<li>\ref requirements_download_installation_using_fcppt_using_cmake</li>
			<ul>
				<li>\ref requirements_download_installation_using_from_build_directory</li>
				<li>\ref requirements_download_installation_using_from_installation</li>
				<li>\ref requirements_download_installation_modify_cmakelists</li>
			</ul>
		</ul>
	</li>
	<li>\ref requirements_download_installation_static_and_shared_builds</li>
</ul>

</td>
</tr>
</table>

\section requirements_download_installation_requirements Requirements

fcppt needs the following at build time:
<ul>
	<li><a href="http://www.cmake.org">>= cmake-2.6</a></li>
	<li><a href="http://www.boost.org">>= boost-1.47</a></li>
	<li>A compiler that implements <a
	href="http://open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1836.pdf">tr1</a></li>
</ul>

To build the documentation, you also need <a href="http://www.doxygen.org/">>=
doxygen-1.7.5</a>.

\section requirements_download_installation_tested_platforms Tested Platforms

The following platforms are tested by us:

<ul>
	<li>gcc-4.6.3 (Gentoo Linux, x86)</li>
	<li>gcc-4.7.2 (Gentoo Linux, amd64)</li>
	<li>clang-3.1 (Gentoo Linux, amd64)</li>
	<li>clang trunk (Gentoo Linux, amd64)</li>
	<li>VC++ 2010 SP1 (Windows XP x86 and Windows 7 amd64)</li>
	<li>VC++ 2011 (Windows 7 amd64)</li>
</ul>

The list does not mean that fcppt won't work on other platforms.

\section requirements_download_installation_download Download

The latest fcppt release is 0.11.1. Get it <a
href="http://fcppt.org/downloads/fcppt-0.11.1.tar.bz2">here</a> (<a
href="http://fcppt.org/downloads/fcppt-0.11.1.tar.bz2.digest">SHA1</a>).

fcppt is available through our public Git Repository:

<a href="git://github.com/freundlich/fcppt.git">git://github.com/freundlich/fcppt.git</a>

Gentoo ebuilds are available in Freundlich's overlay at

<a href="git://github.com/freundlich/freundlich-gentoo.git">git://github.com/freundlich/freundlich-gentoo.git</a>

\section requirements_download_installation_building_and_installation Building and Installation

\subsection requirements_download_installation_building_and_installation_windows Windows

Since we're using cmake on all platforms, building fcppt on Windows follows
"the usual" cmake practice. If you've never used cmake before, you should read
up on it. In a nutshell, cmake is a program which generates build files for
different operating systems and IDEs. On Windows, cmake can generate a Visual
Studio solution file, which you can then use to build the library.

We're intentionally <em>not</em> providing pre-built solutions or project files
for Visual Studio because these files depend on your build configuration: which
boost version you have, which architecture you are building on, which build
type you are using, and so on. We would have to create lots of solution files,
which is simply unpractical, and invoking cmake is pretty simple. For the same
reason, we're not providing pre-built binaries. Sorry.

Download and extract the code and invoke either the cmake gui or the
command-line version inside your designated build directory. Set the generator
to the IDE you're using ("Visual Studio 10 Win64", for example). Also, explore
the other build flags and set them to your desired configuration (for example,
if you want to use fcppt as a static library, be sure to turn on
<code>ENABLE_STATIC</code>). This is what your configuration might look like in
the end:

<pre>
<code>
cmake ^
        -D ENABLE_TEST=OFF ^
        -D ENABLE_EXAMPLES=OFF ^
        -D ENABLE_SHARED=OFF ^
        -D ENABLE_STATIC=ON ^
        -D CMAKE_INSTALL_PREFIX="" ^
        -D CMAKE_BUILD_TYPE="Release" ^
        -D Boost_USE_STATIC_LIBS=ON ^
        -G "Visual Studio 10 Win64" ^
	$fcppt_root_directory
</code>
</pre>

Then, open the generated solution in Visual Studio and build the library.

\subsection requirements_download_installation_building_and_installation_linux_and_osx Linux and OSX

First, download and extract the tarball or clone the git repository. Then, open
a terminal and switch to the directory where fcppt is located. Now, while it
<em>is</em> possible to invoke cmake from the project's root directory, this
is not advised (and is, in fact, not possible with fcppt) since this will
litter the source tree with build files. For that reason, create a build
subdirectory and switch to it:

<pre>
mkdir build;
cd build
</pre>

Next, you have to call cmake and pass it fcppt's source directory as well as
the installation prefix. Continuing the previous example,

<pre>cmake -D CMAKE_INSTALL_PREFIX="/home/me/local" ..</pre>

if you want to install fcppt to <code>/home/me/local</code>.

If you don't want to install fcppt, but use it directly from the source tree,
you have to pass an empty installation prefix:

<pre>cmake -D CMAKE_INSTALL_PREFIX="" ..</pre>

There are other customizable paths that you can use to fine tune the
installation of different components:

<ul>
	<li><strong>INSTALL_INCLUDE_DIR</strong>: Path where the fcppt include directory is installed</li>
	<li><strong>INSTALL_LIBRARY_DIR</strong>: Path where the libraries are installed</li>
	<li><strong>INSTALL_DOC_DIR</strong>: Path where the documentation is installed</li>
	<li><strong>INSTALL_CMAKEMODULES_DIR</strong>: Path where the cmake modules are installed</li>
	<li><strong>INSTALL_CMAKECONFIG_DIR</strong>: Path where the cmake config files are installed</li>
</ul>

All of these will have default values depending on what you specified as
<code>CMAKE_INSTALL_PREFIX</code> the first time you called cmake. If you want
to change them later, you can do that as well.

You can, of course, also use <code>ccmake</code> to configure your installation.

cmake will generate a make file inside the build directory, so you can just say

<pre>
make
</pre>

and fcppt will be built. If you've specified a non-empty installation
directory, then issuing

<pre>
make install
</pre>

will install fcppt to that directory.

\section requirements_download_installation_using_fcppt Using fcppt

\subsection requirements_download_installation_using_fcppt_using_another_build_tool Using another build tool

The preferred way to use fcppt is cmake. If you're not using cmake in your
project, you have to explicitly link against the fcppt libraries (remember,
there is more than one library) and set your include directories
appropriately.

Note that there are <em>two</em> directories containing fcppt header files. One
is directly below the fcppt <em>root</em> directory (called
<code>include/</code>), the other one is generated by cmake and resides
directly below the <em>build</em> directory (and is also called
<code>include/</code>). You have to specify both in order for fcppt to work.
When fcppt installed, both will be installed into the same directory.

\subsection requirements_download_installation_using_fcppt_using_cmake Using cmake

\subsubsection requirements_download_installation_modify_cmakelists Modify your CMakeLists.txt

The following code is needed to use fcppt for one of your cmake targets, named
mytarget here just for exposition.

<pre>
find_package(
	fcppt
	REQUIRED
)

include_directories(
	${fcppt_INCLUDE_DIRS}
)

add_definitions(
	${fcppt_DEFINITIONS}
)

add_executable(
	mytarget
	main.cpp
)

target_link_libraries(
	mytarget
	${fcppt_core_TARGET}
	${fcppt_filesystem_TARGET}
)
</pre>

Note, that we're explicitly specifying which of the fcppt libraries we're
linking against, namely core and filesystem.

Just modifying your <code>CMakeLists.txt</code> might not work out of the box,
however. Read on.

\subsubsection requirements_download_installation_using_from_build_directory Using fcppt from the build directory

If you don't install fcppt, you should specify fcppt's <em>build config</em>
directory using <code>-D fcppt_DIR=fcppt_build_dir/config</code>, where
<code>fcppt_build_dir</code> is the path to fcppt's build directory.

\subsubsection requirements_download_installation_using_from_installation Using fcppt from an installation

If fcppt is installed instead, it will install fcppt's config to
<code>INSTALL_CMAKECONFIG_DIR</code> (which is usually
<code>/usr/lib/cmake</code>), where cmake should be able to find it when
<code>find_package(fcppt)</code> is used. If
<code>INSTALL_CMAKECONFIG_DIR</code> is not automatically found, you can also
set <code>fcppt_DIR</code> to point to it.

\section requirements_download_installation_static_and_shared_builds Static and shared builds

fcppt can be built as a static or shared library, which is controlled by
<code>ENABLE_STATIC</code> and <code>ENABLE_SHARED</code>, respectively. If you
intend to use fcppt as a static library you need to set
<code>fcppt_USE_STATIC_LIBS=ON</code> before you call
<code>find_package(fcppt)</code>. Variables like <code>fcppt_core_TARGET</code>
will automatically reflect the change and point to fcppt's static core library.

If you want to link fcppt to Boost statically, you can set
<code>Boost_USE_STATIC_LIBS=ON</code>.
*/
