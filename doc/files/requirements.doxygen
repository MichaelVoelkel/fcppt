/**
\page requirements_download_installation Requirements, Download and Installation

\section requirements_download_installation_contents Contents

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref requirements_download_installation_requirements</li>
	<li>\ref requirements_download_installation_tested_platforms</li>
	<li>\ref requirements_download_installation_download</li>
	<li>\ref requirements_download_installation_building_and_installation</li>
	<li>
	\ref requirements_download_installation_using_fcppt
		<ul>
			<li>\ref requirements_download_installation_using_fcppt_using_another_build_tool</li>
			<li>\ref requirements_download_installation_using_fcppt_using_cmake</li>
			<ul>
				<li>\ref requirements_download_installation_using_from_build_directory</li>
				<li>\ref requirements_download_installation_using_from_installation</li>
				<li>\ref requirements_download_installation_modify_cmakelists</li>
			</ul>
		</ul>
	</li>
	<li>\ref requirements_download_installation_static_and_shared_builds</li>
</ul>

</td>
</tr>
</table>

\section requirements_download_installation_requirements Requirements

fcppt needs the following at build time:
<ul>
	<li><a href="http://www.cmake.org">>= cmake-2.8.12</a></li>
	<li><a href="http://www.boost.org">>= boost-1.47</a></li>
</ul>

To build the documentation, you also need <a href="http://www.doxygen.org/">>=
doxygen-1.7.5</a>.

\section requirements_download_installation_tested_platforms Tested Platforms

The following platforms are tested by us:

<ul>
	<li>gcc-4.9.2 (Gentoo Linux)</li>
	<li>gcc-5.1 (Gentoo Linux)</li>
	<li>gcc-4.8.1 (MinGW)</li>
	<li>clang 3.6 (Gentoo Linux)</li>
</ul>

fcppt needs a C++11 conforming compiler which probably excludes everything
older than gcc-4.8.1 and clang-3.4.

\section requirements_download_installation_download Download

The latest fcppt release is 1.3.0. Get it <a
href="http://fcppt.org/downloads/fcppt-1.3.0.tar.bz2">here</a> (<a
href="http://fcppt.org/downloads/fcppt-1.3.0.tar.bz2.digest">SHA1</a>).

fcppt is available through our public Git Repository:

<a href="git://github.com/freundlich/fcppt.git">git://github.com/freundlich/fcppt.git</a>

Gentoo ebuilds are available in Freundlich's overlay at

<a href="git://github.com/freundlich/freundlich-gentoo.git">git://github.com/freundlich/freundlich-gentoo.git</a>

\section requirements_download_installation_building_and_installation Building and Installation

First, download and extract the tarball or clone the git repository. Then, open
a terminal and switch to the directory where fcppt is located. Now, while it
<em>is</em> possible to invoke cmake from the project's root directory, this
is not advised (and is, in fact, not possible with fcppt) since this will
litter the source tree with build files. For that reason, create a build
subdirectory and switch to it:

<pre>
mkdir build;
cd build
</pre>

Next, you have to call cmake and pass it fcppt's source directory.  Continuing
the previous example,

<pre>cmake ..</pre>

fcppt does not need to be installed in order to be used. After building fcppt,
you can directly use it from its source directory. If you want to install,
however, don't forget to set <code>CMAKE_INSTALL_PREFIX</code>.

There are other customizable paths that you can use to fine tune the
installation of different components:

<ul>
	<li><strong>INSTALL_INCLUDE_DIR</strong>: Path where the fcppt include directory is installed</li>
	<li><strong>INSTALL_LIBRARY_DIR</strong>: Path where the libraries are installed</li>
	<li><strong>INSTALL_DOC_DIR</strong>: Path where the documentation is installed</li>
	<li><strong>INSTALL_CMAKEMODULES_DIR</strong>: Path where the cmake modules are installed</li>
	<li><strong>INSTALL_CMAKECONFIG_DIR</strong>: Path where the cmake config files are installed</li>
</ul>

All of these will have default values depending on what you specified as
<code>CMAKE_INSTALL_PREFIX</code> the first time you called cmake. If you want
to change them later, you can do that as well.

You can, of course, also use <code>ccmake</code> to configure your installation.

cmake will generate a make file inside the build directory, so you can just say

<pre>
make
</pre>

and fcppt will be built. If you've specified a non-empty installation
directory, then issuing

<pre>
make install
</pre>

will install fcppt to that directory.

\section requirements_download_installation_using_fcppt Using fcppt

\subsection requirements_download_installation_using_fcppt_using_another_build_tool Using another build tool

The preferred way to use fcppt is cmake. If you're not using cmake in your
project, you have to explicitly link against the fcppt libraries (remember,
there is more than one library) and set your include directories
appropriately.

Note that there are <em>two</em> directories containing fcppt header files. One
is directly below the fcppt <em>root</em> directory (called
<code>include/</code>), the other one is generated by cmake and resides
directly below the <em>build</em> directory (and is also called
<code>include/</code>). You have to specify both in order for fcppt to work.
When fcppt installed, both will be installed into the same directory.

\subsection requirements_download_installation_using_fcppt_using_cmake Using cmake

\subsubsection requirements_download_installation_modify_cmakelists Modify your CMakeLists.txt

The following code is needed to use fcppt for one of your cmake targets, named
mytarget here just for exposition.

<pre>
find_package(
	fcppt
	REQUIRED
)

add_executable(
	mytarget
	main.cpp
)

target_link_libraries(
	mytarget
	${fcppt_core_TARGET}
	${fcppt_filesystem_TARGET}
	${fcppt_log_TARGET}
)
</pre>

Note, that we're explicitly specifying which of the fcppt libraries we're
linking against, namely core, filesystem and log. If you don't use any
libraries directly, you will have to add fcppt's include directories
explicitly:

<pre>
target_include_directories(
	mytarget
	PRIVATE
	${fcppt_INCLUDE_DIRS}
)
</pre>

<code>PRIVATE</code> can, of course, be sustituted by <code>PUBLIC</code> or
<code>INTERFACE</code> depending on your use case.

If fcppt has not been installed in a location already recognized by cmake, you
will have to specify additional parameters depending on where fcppt is located:

\subsubsection requirements_download_installation_using_from_build_directory Using fcppt from the build directory

If you don't install fcppt, you should specify fcppt's <em>build config</em>
directory using <code>-D fcppt_DIR=fcppt_build_dir/config</code>, where
<code>fcppt_build_dir</code> is the path to fcppt's build directory.

\subsubsection requirements_download_installation_using_from_installation Using fcppt from an installation

If fcppt is installed instead, it will install fcppt's config to
<code>INSTALL_CMAKECONFIG_DIR</code> (which is usually
<code>/usr/lib/cmake</code>), where cmake should be able to find it when
<code>find_package(fcppt)</code> is used. If
<code>INSTALL_CMAKECONFIG_DIR</code> is not automatically found, you can also
set <code>fcppt_DIR</code> to point to it.

\section requirements_download_installation_static_and_shared_builds Static and shared builds

fcppt can be built as a static or shared library, which is controlled by
<code>ENABLE_STATIC</code> and <code>ENABLE_SHARED</code>, respectively. If you
intend to use fcppt as a static library you need to set
<code>fcppt_USE_STATIC_LIBS=ON</code> before you call
<code>find_package(fcppt)</code>. Variables like <code>fcppt_core_TARGET</code>
will automatically reflect the change and point to fcppt's static core library.

If you want to link fcppt to Boost statically, you can set
<code>Boost_USE_STATIC_LIBS=ON</code>.
*/
