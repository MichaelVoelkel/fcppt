/**
\page code_style_asthetic Asthetic aspects of coding style

\section coding_asthetic Asthetic aspects

This document gives an overview over the asthetic aspects chosen in fcppt.
Asthetic aspects are purely cosmetic and their only purpose is to yield code
that is consistent.

\subsection coding_indentation Indentation

Indentation is a very controversal topic. Everyone has their own opinions on it
and these are also subject to change over time. Fcppt uses a somewhat excessive
indentation style whose purpose is not to be <em>identifier-dependent</em> and
<em>tab-consistent</em>. The former means that changing identifiers should not
lead to reindentation. Consider a rule that enforces lines that are no longer
than, say, 80 characters. If you change a single identifier, it could lead to
reindentation of a lot of lines. The latter means that tab width should not
affect the indentation, therefore making it possible to use tabs, so that
everyone can chose their favorite tab width.

The indentation style can best be given by a simple example:

\snippet coding_style_asthetic.cpp function_example

\subsection coding_naming Naming

Fcppt uses C++-style naming conventions which include:
<ul>
<li>Lowercase identifiers, including underscore, for example
<code>fcppt::optional_bind</code></li>.
<li>Uppercase identifiers for macros, for example
<code>FCPPT_NONCOPYABLE</code>.</li>
</ul>

Members are named with a trailing underscore, while parameters are
named with a leading underscore:

\snippet coding_style_asthetic.cpp struct_example

\subsection coding_partitioning Partitioning

There are multiple layers of code organization in C++:
<ul>
<li>Files, which include header files and implementation (cpp) files.</li>
<li>Namespaces and prefixes for identifiers not in a namespace, like
macros.</li>
</ul>
In fcppt, both aspects are made consistent: Every identifier in a namespace
has a corresponding header path, likewise for macros and prefixes, for example:
<code>fcppt::container::maybe_front</code> resides in
<code>fcppt/container/maybe_front.hpp</code> and
<code>FCPPT_CONFIG_EXTERNAL_BEGIN</code> resides in
<code>fcppt/config/external_begin.hpp</code>.

Because C++'s declarations and linkage are so complicated, there are several
rules for where to declare and define different entities:
<ul>
<li>A function has a header and an implementation file, for example:
<code>fcppt::widen</code> has its declaration in <code>fcppt/widen.hpp</code>
and its implementation in <code>widen.cpp</code>.</li>
<li>A class has a header for its declaration, a header for its definition and
an implementation file for the definition of its functions, for example:
<code>fcppt::log::object</code> has its declaration in
<code>fcppt/log/object_fwd.hpp</code>, its definition in
<code>fcppt/log/object.hpp</code> and the implementation of its functions in
<code>log/object.cpp</code>. </li>
<li>A macro has just a single header, for example
<code>FCPPT_NONCOPYABLE</code> is defined in
<code>fcppt/noncopyable.hpp</code></li>
<li>An inline or template function only has a single header, for example
<code>fcppt::container::maybe_front</code> resides in
<code>fcppt/container/maybe_front.hpp</code>.</li>
<li>A template class, like a normal class, is also partitioned into three
files. However, all of them must be headers. For example,
<code>fcppt::math::vector::object</code> has its declaration in
<code>fcppt/math/vector/object_fwd.hpp</code>, its definition in
<code>fcppt/math/vector/object_decl.hpp</code> and the implementation of its
functions in <code>fcppt/math/vector/object_impl.hpp</code>.</li>
<li>Typedefs can have a forward declaration but are not required to. For
example, <code>fcppt::math::vector::static_</code> has its declaration in
<code>fcppt/math/vector/static_fwd.hpp</code> and the header
<code>fcppt/math/vector/static.hpp</code> includes
<code>fcppt/math/vector/object_impl.hpp</code>, leaving out the step of
including <code>fcppt/math/vector/object_decl.hpp</code>.</li>
</ul>

Partitioning code into multiple headers also brings up the question of where to
include which header. Fcppt follows a rule of <em>minimal includes</em> which
means that including declarations should be preferred over including
definitions. For example, when a function <code>T f(U)</code> is declared, it
is enough to include the declarations of <code>T</code> and <code>U</code>
only.
*/
