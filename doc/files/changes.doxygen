/**
\page changes Changes

\section changes_changes_to_220 Changes from 2.1.0 to 2.2.0

\subsection changes_added_functionality_to_220 Added functionality

<ul>

<li><code>CMake</code>
	<ul>
	<li>Added <em>interface libraries</em> to fcppt's exported targets. For
	example, <code>fcppt_core_interface</code> can be used to inherit the
	include paths and compile definitions from <code>fcppt_core</code>
	without linking to the library.</li>
	<li>Added <code>INCLUDE_DIRS</code> and <code>LINK_LIBS</code> to
	<code>fcppt_utils_add_dummy_target</code>.</li>
	</ul>
</li>

<li>\ref fcpptalgorithm
	<ul>
	<li>Added \link fcppt::algorithm::fold_break\endlink.</li>
	</ul>
</li>

<li>\ref fcpptconfig
	<ul>
	<li>Ignore <code>-Wundefined-var-template</code> for
	<code>clang-3.9</code> in external headers.</li>
	</ul>
</li>

<li>\ref fcpptcontainertree
	<ul>
	<li>Added \link fcppt::container::tree::make_pre_order\endlink.</li>
	<li>Added \link fcppt::container::tree::make_to_root\endlink.</li>
	</ul>
</li>

<li>\ref fcpptfilesystem
	<ul>
	<li>Added \link fcppt::filesystem::directory_range\endlink.</li>
	</ul>
</li>

</ul>

\subsection changes_changed_functionality_to_220 Changed functionality

<ul>
<li><code>CMake</code>
	<ul>
	<li>Use named arguments in <code>fcppt_utils_generate_config</code>.</li>
	</ul>
</li>

<li>\ref fcpptlog
	<p>
	The logging library went through a major rewrite, with the purpose
	to remove global objects.</p>
	<ul>
	<li>\link fcppt::log::object\endlink now always refers to an \link
	fcppt::log::context\endlink.</li>
	<li>Log levels are stored in \link fcppt::log::context\endlink objects
	only. This way, they can be set before any log locations are
	created.</li>
	</ul>
</li>
</ul>

\subsection changes_removed_functionality_to_220 Removed functionality

\section changes_changes_to_210 Changes from 2.0.0 to 2.1.0

\subsection changes_general_to_210 General changes

<ul>
<li>
	<b>VC++ from Visual Studio 2015 Update 2</b> is now supported.
</li>
</ul>

\subsection changes_added_functionality_to_210 Added functionality

<ul>

<li>\ref fcpptalgorithm
	<ul>
	<li>Added \link fcppt::algorithm::generate_n\endlink.</li>
	<li>Allow different implementations for ranges via \link
	fcppt::algorithm::loop_break_impl\endlink.</li>
	<li>Support <code>std::tuple</code> as a range.</li>
	</ul>
</li>

<li>\ref fcpptcasts
	<ul>
	<li>Added \link fcppt::cast::dynamic_cross\endlink and \link
	fcppt::cast::dynamic_cross_exn\endlink.</li>
	</ul>
</li>

<li>\ref fcpptconfig
	<ul>
	<li>Ignore <code>-Wfloat-conversion</code> and
	<code>-Wsign-conversion</code> for <code>gcc-6</code> in external
	headers again.</li>
	<li>Ignore <code>-Wexpansion-to-defined</code> for
	<code>clang-3.9</code> in external headers.</li>
	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>
	<li>Added \link fcppt::container::make_array\endlink.</li>
	</ul>
</li>

<li>\ref fcpptcontainergrid
	<ul>
	<li>Added \link fcppt::container::grid::make_min\endlink and \link
	fcppt::container::grid::make_sup\endlink.</li>
	<li>Added \link fcppt::container::grid::map\endlink.</li>
	<li>Made \link fcppt::container::grid::pos_range\endlink and \link
	fcppt::container::grid::pos_ref_range\endlink assignable.</li>
	<li>Added \link fcppt::container::grid::apply\endlink.</li>
	</ul>
</li>

<li>\ref fcpptcontainertree
	<ul>
	<li>\link fcppt::container::tree::pre_order\endlink is now
	copyable.</li>
	<li>Added \link fcppt::container::tree::to_root\endlink.</li>
	</ul>
</li>

<li>\ref fcppteither
	<p>
	New library that represents sum types of <em>failure</em> and
	<em>success</em>.
	</p>
</li>

<li>\ref fcpptenum
	<ul>
	<li>Added \link fcppt::cast_to_enum_exn\endlink.</li>
	</ul>
</li>

<li>\ref fcpptio
	<ul>
	<li>Added \link fcppt::io::read_chars\endlink.</li>
	<li>Added \link fcppt::io::get\endlink.</li>
	</ul>
</li>

<li>\ref fcpptmpl
	<ul>
	<li>Added \link fcppt::mpl::flatten\endlink.</li>
	<li>Added \link fcppt::mpl::numeric_max\endlink.</li>
	</ul>
</li>

<li>\ref fcpptoptional
	<ul>
	<li>Added \link fcppt::optional::filter\endlink.</li>
	<li>Added \link fcppt::optional::apply\endlink.</li>
	<li>Added \link fcppt::optional::cat\endlink.</li>
	<li>Added \link fcppt::optional::make\endlink.</li>
	</ul>
</li>

<li>\ref fcppttypetraits
	<ul>
	<li>Added \link fcppt::type_traits::is_base_of\endlink that only works
	on complete types.</li>
	</ul>
</li>

<li>\ref fcpptvarious
	<ul>
	<li>Added \link fcppt::move_if\endlink.</li>
	<li>Added \link fcppt::args\endlink.</li>
	<li>\link fcppt::cyclic_iterator\endlink can now be a random-access
	iterator.</li>
	<li>Added \link fcppt::getenv\endlink.</li>
	<li>Added \link FCPPT_USE\endlink.</li>
	</ul>
</li>

</ul>

\subsection changes_changed_functionality_to_210 Changed functionality

<ul>

<li>\ref fcpptcasts
	<ul>
	<li>Renamed <code>fcppt::cast::try_dynamic</code> to \link
	fcppt::cast::dynamic\endlink, and renamed
	<code>%fcppt::cast::dynamic</code> to \link
	fcppt::cast::dynamic_exn\endlink.</li>
	<li>\link fcppt::cast::dynamic\endlink and \link
	fcppt::cast::dynamic_exn\endlink only work on related types now.</li>
	</ul>
</li>

<li>\ref fcpptenum
	<ul>
	<li>\link fcppt::cast_to_enum\endlink now returns an optional.</li>
	</ul>
</li>

<li>\ref fcpptoptional
	<ul>
	<li>Moved everything to the \link fcppt::optional\endlink
	namespace.</li>
	<li>Removed optional references and replaced them with optionals to
	\link fcppt::reference\endlink.</li>
	<li>Renamed <code>optional_bind_construct</code> to \link
	fcppt::optional::map\endlink.</li>
	</ul>
</li>

<li>\ref fcpptref
	<ul>
	<li>Renamed <code>fcppt::reference_wrapper</code> to \link
	fcppt::reference\endlink.</li>
	</ul>
</li>

<li>\ref fcpptvarious
	<ul>
	<li>\link fcppt::cyclic_iterator\endlink now uses a pair to construct
	its boundaries.</li>
	<li>\link FCPPT_NONCOPYABLE\endlink and \link
	FCPPT_NONASSIGNABLE\endlink now simply use <code>=delete</code> instead
	of <code>private:</code></li>
	</ul>
</li>

</ul>

\subsection changes_removed_functionality_to_210 Removed functionality

<ul>

<li>\ref fcpptalgorithm
	<ul>
	<li>Removed <code>fcppt::algorithm::shift_compare</code>.</li>
	</ul>
</li>

<li>\ref fcpptassign
	<ul>
	<li>Removed <code>fcppt::assign::make_container_opt</code>.</li>
	<li>Removed <code>fcppt::assign::make_map</code>.</li>
	</ul>
</li>

<li>\ref fcpptcasts
	<ul>
	<li>Removed <code>%fcppt::cast::dynamic</code> for pointers.</li>
	</ul>
</li>

<li>\ref fcpptio
	<ul>
	<li>Removed <code>fcppt::io::read_exn</code>.</li>
	<li>Removed <code>fcppt::io::raw_container_source</code>.</li>
	</ul>
</li>

<li>\ref fcpptmath
	<ul>
	<li>Removed <code>fcppt::math::mod_assign</code>.</li>
	</ul>
</li>

<li>\ref fcpptstring
	<ul>
	<li>Removed <code>fcppt::extract_from_string_exn</code>.</li>
	</ul>
</li>

<li>\ref fcpptvarious
	<ul>
	<li>Removed <code>FCPPT_DECLTYPE_SINK</code>.</li>
	<li>Removed <code>fcppt::tag_value</code>.</li>
	</ul>
</li>

</ul>



\section changes_changes_to_200 Changes from 1.5.0 to 2.0.0

\subsection changes_general_to_200 General changes

<ul>

<li>
	<b><code>C++14</code> is now required.</b> This probably excludes compilers
	older than <code>gcc-5.2</code> and <code>clang-3.4</code>. However, this
	also leads to several improvements:
	<ul>
	<li>Polymorphic lambdas are now used to initialize arrays with static indices.
	This improves the safety of several algorithms, e.g. <code>matrix *
	vector</code>, <code>matrix * matrix</code> and so on, by checking for
	out-of-bounds accesses at compile-time.</li>
	<li>Heterogenous lookup is now supported. For example, you can search a
	<code>std::set<unique_ptr<int>></code> given an <code>int *</code>.</li>
	</ul>
</li>

<li>
	\ref fcppt.algorithm has been cleaned up substantially:
	<ul>
	<li>
	All <code>_exn</code> functions have been removed in favor of
	<code>%fcppt::optional_to_exception</code>.</li>
	<li>All iterator-based versions have
	been removed in favor of ranges.</li>
	<li>All algorithms can now take rvalues to support views.</li>
	</ul>
</li>

</ul>

\subsection changes_bugfixes_to_200 Bugfixes

<ul>
<li>\ref fcpptalgorithm
	<ul>
	<li>Fixed return type of \link fcppt::algorithm::join\endlink so it
	never returns a reference.</li>
	</ul>
</li>

</ul>

\subsection changes_added_functionality_to_200 Added functionality

<ul>

<li><code>CMake</code>
	<ul>
	<li>Added <code>NO_CODE</code> flag to
	<code>fcppt_utils_add_test</code> which can be used to generate test
	cases that only consist of static asserts.</li>
	</ul>
</li>

<li>\ref fcpptalgorithm
	<ul>
	<li>Added \link fcppt::algorithm::loop\endlink to express loops over
	different ranges, including MPL ranges. Also added \link
	fcppt::algorithm::loop_break\endlink which is similar to the former but
	can break out of the loop early.</li>
	</ul>
</li>

<li>\ref fcpptbit
	<ul>
	<li> New library that makes creating bit masks and testing them a bit
	safer and less tedious. See for example \link
	fcppt::bit::shifted_mask\endlink and \link
	fcppt::bit::test\endlink.</li>
	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>
	<li>Added \link fcppt::container::find_opt\endlink which returns a
	reference to <code> value_type</code> instead of
	<code>mapped_type</code>.</li>
	</ul>
</li>

<li>\ref fcpptconfig
	<ul>
	<li>Ignore <code>-Wsign-compare</code> in external headers.</li>
	</ul>
</li>

<li>\ref fcpptenum
	<ul>
	<li>Added \link fcppt::mpl::enum_range\endlink and \link
	fcppt::mpl::enum_range_start_end\endlink.</li>
	</ul>
</li>

<li>\ref fcpptmath
	<ul>
	<li>Added \link fcppt::math::int_range\endlink and \link
	fcppt::math::int_range_count\endlink.</li>
	</ul>
</li>

<li>\ref fcpptmathmatrix
	<ul>
	<li>Added \link fcppt::math::matrix::init\endlink.</li>
	<li>Added \link fcppt::math::matrix::at_c\endlink.</li>
	<li>Added \link
	fcppt::math::matrix::delete_row_and_column_static\endlink.</li>
	</ul>
</li>

<li>\ref fcpptmathsphere
	<ul>
	<li>Added <code>fcppt/math/sphere/output.hpp</code>.</li>
	</ul>
</li>

<li>\ref fcpptmpl
	<ul>
	<li>Added \link fcppt::mpl::copy\endlink.</li>
	<li>Added \link fcppt::mpl::for_each_break\endlink.</li>
	<li>Added \link fcppt::mpl::integral_cast_tpl\endlink.</li>
	</ul>
</li>

<li>\ref fcpptio
	<ul>
	<li>Added \link fcppt::io::expect\endlink which fails a stream if it
	cannot read the expected value.</li>
	</ul>
</li>

<li>\ref fcpptoptional
	<ul>
	<li>Added <code>fcppt::optional_join</code>.</li>
	</ul>
</li>

<li>\ref fcpptsignal
	<ul>
	<li>Added \link fcppt::signal::optional_auto_connection\endlink
	typedef.</li>
	</ul>
</li>

<li>\ref fcpptvariant
	<ul>
	<li>Added \link fcppt::variant::variadic\endlink.</li>
	</ul>
</li>

<li>\ref fcpptvarious
	<ul>
	<li>Added <code>FCPPT_DECLTYPE_SINK</code> which returns
	<code>decltype</code> of an expression and also uses it. This is useful
	in polymorphic lambdas where the argument is only used for its
	type.</li>
	<li>Added \link fcppt::tag_type\endlink which extracts the type of an
	\link fcppt::tag\endlink.</li>
	<li>Added <code>fcppt::tag_value</code> to extract a
	default-constructed value of a tag, which is useful for integral
	constants.</li>
	</ul>
</li>

</ul>

\subsection changes_changed_functionality_to_200 Changed functionality

<ul>
<li>\ref fcpptalgorithm
	<ul>
	<li>\link fcppt::algorithm::sequence_iteration\endlink, \link
	fcppt::algorithm::map_iteration\endlink and \link
	fcppt::algorithm::map_iteration_second\endlink now expect their
	function to return \link fcppt::algorithm::update_action\endlink
	instead of a bool.</li>
	<li>Renamed <code>%fcppt::algorithm::array_fold_static</code> to \link
	fcppt::algorithm::array_init\endlink,
	<code>%fcppt::algorithm::enum_array_fold_static</code> to \link
	fcppt::algorithm::enum_array_init\endlink and
	<code>%fcppt::algorithm::array_init</code> to \link
	fcppt::algorithm::array_init_const\endlink.</li>
	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>
	<li>Renamed <code>fcppt::container::find_opt</code> to \link
	fcppt::container::find_opt_mapped\endlink.</li>
	</ul>
</li>

<li>\ref fcpptcontainerbitfield
	<ul>
	<li>Simplified \link fcppt::container::bitfield::object\endlink by
	removing iterator-based functions, <code>operator bool</code>,
	<code>swap</code> and <code>clear</code>.</li>
	<li>Moved comparison operators into
	<code>fcppt/container/bitfield/comparison.hpp</code>.</li>
	<li>Moved all other operators into
	<code>fcppt/container/bitfield/operators.hpp</code>.</li>
	</ul>
</li>

<li>\ref fcpptcontainertree
	<ul>
	<li>Made \link fcppt::container::tree::child_position\endlink a free
	function and made its implementation safer.</li>
	</ul>
</li>

<li>\ref fcpptenum
	<ul>
	<li>Removed <code>fcppt::enum_is_empty</code>. All enum ranges are now
	non-empty.</li>
	</ul>
</li>

<li>\ref fcpptmath
	<ul>
	<li>Use \link fcppt::math::size_type\endlink directly for static sizes,
	instead of <code>std::integral_constant</code>. This greatly simplifies
	matching of template arguments.</li>
	</ul>
</li>

<li>\ref fcpptmathbox
	<ul>
	<li>\link fcppt::math::box::object\endlink now uses a
	<code>(pos,max)</code> representation instead of
	<code>(pos,dim)</code>. This greatly simplifies a lot of algorithms on
	boxes. It also changes the interface slightly.</li>
	<li>Added \link fcppt::math::box::init_dim\endlink and \link
	fcppt::math::box::init_max\endlink to replace the former
	<code>fcppt::math::box::init</code>.</li>
	<li>Moved <code>null</code> of \link fcppt::math::box::object\endlink
	to \link fcppt::math::box::null\endlink.</li>
	</ul>
</li>

<li>\ref fcpptmathdim
	<ul>
	<li>Use variadic constructors for \link
	fcppt::math::dim::object\endlink.</li>
	<li>Moved <code>null</code> of \link fcppt::math::dim::object\endlink
	to \link fcppt::math::dim::null\endlink.</li>
	</ul>
</li>

<li>\ref fcpptmathmatrix
	<ul>
	<li>Use variadic constructors for \link
	fcppt::math::matrix::object\endlink which takes a parameter pack of
	\link fcppt::math::matrix::row\endlink.</li>
	<li>Moved <code>identity</code> of \link
	fcppt::math::matrix::object\endlink to \link
	fcppt::math::matrix::identity\endlink.</li>
	</ul>
</li>

<li>\ref fcpptmathsphere
	<ul>
	<li>Moved comparison operators of \link
	fcppt::math::sphere::object\endlink to
	<code>fcppt/math/sphere/comparison.hpp</code>.</li>
	</ul>
</li>

<li>\ref fcpptmathvector
	<ul>
	<li>Use variadic constructors for \link
	fcppt::math::vector::object\endlink.</li>
	<li>Moved <code>null</code> of \link fcppt::math::vector::object\endlink
	to \link fcppt::math::vector::null\endlink.</li>
	</ul>
</li>

<li>\ref fcpptsmartptr
	<ul>
	<li>Renamed <code>fcppt::make_unique_ptr_fcppt</code> to \link
	fcppt::make_unique_ptr\endlink.</li>
	</ul>
</li>

</ul>

\subsection changes_removed_functionality_to_200 Removed functionality

<ul>
<li><code>CMake</code>
	<ul>
	<li>Removed
	<code>BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0</code>
	which has not been used for a long time.</li>
	</ul>
</li>

<li>\ref fcpptalgorithm
	<ul>
	<li>Removed <code>fcppt::algorithm::array_fold</code> and
	<code>fcppt::algorithm::enum_array_fold</code> which were only useful
	in <code>C++11</code>.
	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>
	<li>Removed <code>fcppt::container::find_exn</code> in favor of
	<code>%fcppt::optional_to_exception</code>.</li>
	</ul>
</li>

<li>\ref fcpptcontainergrid
	<ul>
	<li>Removed <code>fcppt::container::grid::object::at</code> in favor of
	\link fcppt::container::grid::at_optional\endlink.</li>
	<li>Removed <code>fcppt::container::grid::is_square</code> which is
	covered by \link fcppt::math::dim::is_quadratic\endlink.</li>
	<li>Removed <code>fcppt::container::grid::iterator_position</code>
	which was unused and probably broken.</li>
	</ul>
</li>

<li>\ref fcpptenum
	<ul>
	<li>Removed <code>%at()</code> and <code>empty()</code> from \link
	fcppt::container::enum_array\endlink.</li>
	</ul>
</li>

<li>\ref fcpptmath
	<ul>
	<li>Removed default constructors.</li>
	<li>Removed container-like functionality, including iterator-based
	constructors, <code>begin</code>/<code>end</code>, <code>front</code>/
	<code>back</code>, etc, and so on.</li>
	<li>Removed swap implementations because they gained nothing over
	<code>std::swap</code>.</li>
	</ul>
</li>

<li>\ref fcpptmathvector
	<ul>
	<li>Removed <code>%fcppt::math::vector::project</code> and
	<code>%fcppt::math::vector::orthogonalize</code>.</li>
	</ul>
</li>

<li>\ref fcpptsignal
	<ul>
	<li>Removed <code>fcppt::signal::scoped_connection</code> which was a
	typedef to <code>fcppt::signal::auto_connection const</code>.</li>
	</ul>
</li>

<li>\ref fcpptsmartptr
	<ul>
	<li>Removed <code>fcppt::make_unique_ptr</code> which used to create a
	<code>std::unique_ptr</code>.</li>
	</ul>
</li>

<li>\ref fcpptstrongtypedef
	<ul>
	<li>Removed implicit assignment from the underlying type.</li>
	<li>Removed strong typedef references.</li>
	</ul>
</li>

<li>\ref fcppttime
	<ul>
	<li>Removed <code>fcppt::time::parse_time</code> and
	<code>fcppt::time::parse_date</code>.</li>
	</ul>
</li>

<li>\ref fcpptvariant
	<ul>
	<li>Removed <code>fcppt::variant::object::get_exn</code>. Use the free
	function \link fcppt::variant::get_exn\endlink instead.</li>
	</ul>
</li>

</ul>
*/
