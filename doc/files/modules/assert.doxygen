/**
\defgroup fcpptassert fcppt.assert
\ingroup fcpptmain
\brief Macros and functions for assertions

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref assert_introduction</li>
	<li>\ref assert_categories</li>
	<li>\ref assert_messages</li>
	<li>\ref assert_headers</li>
</ul>

</td>
</tr>
</table>

\section assert_introduction Introduction

So called assertions are conditions in the source code that are checked at
runtime. If the conditions do not hold, then some sort of error mechanism
should be invoked. So, assertions fit into the greater picture of
error handling, where they play an important role.

Error handling in C++ can be done using different mechanisms:

<ul>

<li>Checking return values of functions, acting appropriately when an error has
occurred.</li>

<li>Throwing an exception, which may be caught during the stack unwinding
process.</li>

<li>Calling <code>std::terminate</code></li>

<li>Using other mechanisms like C's <code>assert</code> macro, which might call
<code>std::abort</code></li>

</ul>

A lot of times you might hear that exceptions are the superior mechanism, and
that you should never use return values to indicate errors or even abort the
program.

The important thing to realize here is that there are different kinds of
errors, that should be handled differently.

<dl>
<dt>A failed function call that is to be expected under certain
conditions.</dt>

<dd>In this case, a function should definitely report this as a return value,
probably using something like fcppt::optional.</dt>

<dt>A failed function call that is not expected under normal conditions.</dt>

<dd>Here an exception is usually a good choice. Common errors in this category
include: Resources are exhausted and normal program execution is not possible,
a file that should be there is missing, and so on.</dd>

<dt>A failed function call because the parameters are wrong.</dt>

<dd>This usually indicates a programming mistake. Throwing an exception here is
almost never the right thing to do because code cannot be expected to recover
from this.</dd>

<dt>Other conditions that are impossible in the absence of errors.</dt>

<dd>An example for this would be a switch over an enum that handles every
possible enumerator. The default case should never be reached. In such a case,
throwing an exception would also be meaningless.</dd>

</dl>

\section assert_categories Assertion categories

As previously outlined, errors not only fall into different categories, but you
also want to act upon them differently. fcppt provides different assert macros
to do that. For most of the macros, there also exists a <em>message</em>
variant that lets you specify an additional message for what went wrong.

<dl>
<dt>\link FCPPT_ASSERT_PRE \endlink and \link FCPPT_ASSERT_PRE_MESSAGE
\endlink</dt>

<dd>These should be used to check pre conditions for a function and they will
terminate the program if they are violated.</dd>

<dt>\link FCPPT_ASSERT_POST \endlink and \link FCPPT_ASSERT_POST_MESSAGE
\endlink</dt>

<dd>These should be used to check for post conditions of functions. They will
throw an exception on failure.</dd>

<dt>\link FCPPT_ASSERT_ERROR \endlink and \link FCPPT_ASSERT_ERROR_MESSAGE
\endlink</dt>

<dd>These should be used if something in the middle of a function goes wrong
that could be considered a delayed pre condition. They will also terminate the
program if they are violated.</dd>

<dt>\link FCPPT_ASSERT_THROW \endlink and \link FCPPT_ASSERT_THROW_MESSAGE
\endlink</dt>

<dd>These can generally be used as a replacement for throwing exceptions.</dd>

<dt>\link FCPPT_ASSERT_UNIMPLEMENTED_MESSAGE \endlink<dt>

<dd>This macro can be used as a placeholder for unimplemented features. It must
be given a message describing what feature is missing, and it will terminate
the program.</dd>

<dt>\link FCPPT_ASSERT_UNREACHABLE \endlink and \link
FCPPT_ASSERT_UNREACHABLE_MESSAGE \endlink</dt>

<dd>These should be used to check for unreachable code, like reaching a default
case in a switch that handles every possible enum value. They will
terminate the program.</dd>

</dl>

Here is an example on how to use the pre and post condition macros:

\snippet assert.cpp assert_pre_post

The usual case where every enumerator is handled in a switch can be tested as
follows:

\snippet assert.cpp assert_unreachable

\section assert_messages Assertion messages

Another important feature is that assertions should be as elaborate as
possible. Therefore, every macro gathers information about the current file,
line of the current file, the current function's name, the failed assertion and
the optional message. If a macro terminates the program, the message will be
printed to <code>cerr</code> before that happens. If a macro throws an
exception, that exception will be constructed with an
fcppt::assert_::information object that holds the information instead.

An exception that is to receive such information must have a constructor that
takes an fcppt::assert_::information object.

\snippet assert.cpp assert_throw

\section assert_headers Header files

<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>error.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_ERROR \endlink</td>
</tr>
<tr>
<td><code>error_message.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_ERROR_MESSAGE \endlink</td>
</tr>
<tr>
<td><code>exception.hpp</code></td>
<td>Contains fcppt::assert_::exception</td>
</tr>
<tr>
<td><code>information_fwd.hpp</code></td>
<td>Contains fcppt::assert_::information's declaration</td>
</tr>
<tr>
<td><code>information.hpp</code></td>
<td>Contains fcppt::assert_::information's definition</td>
</tr>
<tr>
<td><code>make_message.hpp</code></td>
<td>Contains the fcppt::assert_::make_message function</td>
</tr>
<tr>
<td><code>optional_error.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_OPTIONAL_ERROR \endlink</td>
</tr>
<tr>
<td><code>post.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_POST \endlink</td>
</tr>
<tr>
<td><code>post_message.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_POST_MESSAGE \endlink</td>
</tr>
<tr>
<td><code>pre.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_PRE \endlink</td>
</tr>
<tr>
<td><code>pre_message.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_PRE_MESSAGE \endlink</td>
</tr>
<tr>
<td><code>throw.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_THROW \endlink</td>
</tr>
<tr>
<td><code>throw_message.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_THROW_MESSAGE \endlink</td>
</tr>
<tr>
<td><code>unimplemented_message.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_UNIMPLEMENTED_MESSAGE \endlink</td>
</tr>
<tr>
<td><code>unreachable.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_UNREACHABLE \endlink</td>
</tr>
<tr>
<td><code>unreachable_message.hpp</code></td>
<td>Contains \link FCPPT_ASSERT_UNREACHABLE_MESSAGE \endlink</td>
</tr>
</table>
*/
namespace fcppt
{
/// Helper functions for assertions
namespace assert_ {}
}
