/**
\defgroup fcpptoptional fcppt.optional
\ingroup fcpptmain
\brief A class that makes values optional.

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref optional_motivation</li>
	<li>\ref optional_design</li>
	<li>\ref optional_reference</li>
	<li>\ref optional_operations</li>
	<li>\ref optional_headers</li>
</ul>

</td>
</tr>
</table>

\section optional_motivation Motivation

Often it is necessary to distinguish between having a value and having none.
This includes operations that might return no result, for example looking for
an element in a container. Also, in a lot of situations, data may be absent,
for example a tree might have a parent or it might have none. Values that may
be nothing are common in C++ but are not handled consistently. This includes
special values like <code>std::string::npos</code>, <code>nullptr</code> or end
iterators. Modelling optionals explicitly has several advantages. Consider the
following example:

\snippet optional.cpp optional_example_bad

First of all, the example makes it clear that the function can deal with an
<code>unsigned int</code> or nothing at all. However, using optionals this way
makes them no safer than using pointers that may be null. To improve the
situation, we must avoid calling <code>get_unsafe</code> at all, which will
lead to undefined behavior if the optional has no value. To do this, the most
basic operation is called <code>maybe</code> which acts upon the two different
cases.

\snippet optional.cpp optional_example_good

As you can see, the second lambda function gets the already dereferenced
optional value as a parameter, freeing the user from dereferencing the
optional.

\section optional_design Design

The goal of \ref fcppt.optional, in contrast to <code>%boost::optional</code>,
is to be as explicit as possible and to avoid pointer semantics. The key
differences include:
<ul>
<li><code>%fcppt::optional::object</code> does not have
<code>operator-></code>, <code>operator*</code> nor <code>operator bool</code>,
so that it does not mimic pointers.</li>
<li><code>%fcppt::optional::object</code> uses alignment support from the
compiler instead of relying on
<code>%boost::detail::aligned_storage</code>.</li>
<li><code>%fcppt::optional::object\<T></code> does not have an implicit
constructor, nor assignment operator from <code>T</code>.</li>
<li><code>%fcppt::optional::object</code> does not implement optional
references directly (so <code>%fcppt::optional::object<T &></code> is not
allowed). <code>%boost::optional</code> mimics the semantics of ordinary
references. For example it allows implicit conversions for assignment.</li>
</ul>

\section optional_reference Optional References

Instead of implementing optional references directly, fcppt offers \link
fcppt::optional::reference\endlink which is a typedef to
<code>%fcppt::optional::object<fcppt::reference<T>></code>. The reason behind
this is that code that acts on optional references might make use of references
itself. For example it is not uncommon to pass the object held by an optional
to functions like \link fcppt::optional::maybe_void\endlink by (const)
reference, which can be used to change the object or to pass its address along.

\snippet optional.cpp optional_reference

On the other hand, if an optional holds a reference it does not hold the actual
object, so changing the object behind the reference or passing the reference
along has different semantics.

\snippet optional.cpp optional_reference_2

Using \link fcppt::reference\endlink for optional references clearly
distinguishes these two cases.

\section optional_operations Common Operations

\link fcppt::optional::maybe\endlink is the most basic function that operates on
optionals, However, some commonly needed operations arise as well. Perhaps the
most prominent operation would be the so called bind function which decomposes
an optional and creates a new one by preserving empty optionals.

\snippet optional.cpp optional_bind

There is also a shortcut for optional binds that always return a non empty
optional, called \link fcppt::optional::map\endlink.

\snippet optional.cpp optional_map

Another commonly used function is \link fcppt::optional::from\endlink. It
deconstructs an optional by either taking its value or returning a default
value.

\snippet optional.cpp from_optional

\section optional_headers Header files

<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>object_fwd.hpp</code></td>
<td>Contains \link fcppt::optional::object optional's \endlink declaration.</td>
</tr>
<tr>
<td><code>object_decl.hpp</code></td>
<td>Contains \link fcppt::optional::object optional's \endlink definition.</td>
</tr>
<tr>
<td><code>object_impl.hpp</code></td>
<td>Contains the definition of \link fcppt::optional::object optional's \endlink member functions.</td>
</tr>
<tr>
<td><code>object.hpp</code></td>
<td>Includes <code>object_impl.hpp</code> and <code>comparison.hpp</code></td>
</tr>
<tr>
<td><code>alternative.hpp</code></td>
<td>Contains \link fcppt::optional::alternative \endlink.</td>
</tr>
<tr>
<td><code>apply.hpp</code></td>
<td>Contains \link fcppt::optional::apply \endlink.</td>
</tr>
<tr>
<td><code>assign.hpp</code></td>
<td>Contains \link fcppt::optional::assign \endlink.</td>
</tr>
<tr>
<td><code>bind.hpp</code></td>
<td>Contains \link fcppt::optional::bind \endlink.</td>
</tr>
<tr>
<td><code>cat.hpp</code></td>
<td>Contains \link fcppt::optional::cat \endlink.</td>
</tr>
<tr>
<td><code>combine.hpp</code></td>
<td>Contains \link fcppt::optional::combine \endlink.</td>
</tr>
<tr>
<td><code>comparison.hpp</code></td>
<td>Contains <code>operator==</code>, <code>operator!=</code> and <code>operator< </code></td>
</tr>
<tr>
<td><code>const_cast.hpp</code></td>
<td>Contains \link fcppt::optional::const_cast_ \endlink.</td>
</tr>
<tr>
<td><code>copy_value.hpp</code></td>
<td>Contains \link fcppt::optional::copy_value \endlink.</td>
</tr>
<tr>
<td><code>deref.hpp</code></td>
<td>Contains \link fcppt::optional::deref \endlink.</td>
</tr>
<tr>
<td><code>dynamic_cast.hpp</code></td>
<td>Contains \link fcppt::optional::dynamic_cast_ \endlink.</td>
</tr>
<tr>
<td><code>filter.hpp</code></td>
<td>Contains \link fcppt::optional::filter \endlink.</td>
</tr>
<tr>
<td><code>from.hpp</code></td>
<td>Contains \link fcppt::optional::from \endlink.</td>
</tr>
<tr>
<td><code>from_pointer.hpp</code></td>
<td>Contains \link fcppt::optional::from_pointer \endlink.</td>
</tr>
<tr>
<td><code>join.hpp</code></td>
<td>Contains \link fcppt::optional::join \endlink.</td>
</tr>
<tr>
<td><code>map.hpp</code></td>
<td>Contains \link fcppt::optional::map \endlink.</td>
</tr>
<tr>
<td><code>maybe.hpp</code></td>
<td>Contains \link fcppt::optional::maybe \endlink.</td>
</tr>
<tr>
<td><code>maybe_multi.hpp</code></td>
<td>Contains \link fcppt::optional::maybe_multi \endlink.</td>
</tr>
<tr>
<td><code>maybe_void.hpp</code></td>
<td>Contains \link fcppt::optional::maybe_void \endlink.</td>
</tr>
<tr>
<td><code>maybe_void_multi.hpp</code></td>
<td>Contains \link fcppt::optional::maybe_void_multi \endlink.</td>
</tr>
<tr>
<td><code>output.hpp</code></td>
<td>Contains <code>operator<< </code>.</td>
</tr>
<tr>
<td><code>reference_fwd.hpp</code></td>
<td>Contains the \link fcppt::optional::reference \endlink typedef.</td>
</tr>
<tr>
<td><code>reference.hpp</code></td>
<td>Includes <code>reference_fwd.hpp</code> and <code>object_impl.hpp</code>.</td>
</tr>
<tr>
<td><code>static_cast.hpp</code></td>
<td>Contains \link fcppt::optional::static_cast_ \endlink.</td>
</tr>
<tr>
<td><code>to_exception.hpp</code></td>
<td>Contains \link fcppt::optional::to_exception \endlink.</td>
</tr>
</table>
*/
