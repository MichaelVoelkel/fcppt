/**
\defgroup fcpptoptional fcppt.optional
\ingroup fcpptmain
\brief A class that makes values or references optional.

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref optional_motivation</li>
	<li>\ref optional_value</li>
	<li>\ref optional_reference</li>
	<li>\ref optional_design</li>
	<li>\ref optional_operations</li>
	<li>\ref optional_headers</li>
</ul>

</td>
</tr>
</table>

\section optional_motivation Motivation

Often it is necessary to distinguish between having a value and having none.
This includes operations that might return no result, for example looking for
an element in a container. Also, in a lot of situations, data may be absent,
for example a tree might have a parent or it might have none. Values that may
be nothing are common in C++ but are not handled consistently. This includes
special values like <code>std::string::npos</code>, <code>nullptr</code> or end
iterators. Modelling optionals explicitly has several advantages. Consider the
following example:

\snippet optional.cpp optional_example_bad

First of all, the example makes it clear that the function can deal with an
<code>unsigned int</code> or nothing at all. However, using optionals this way
makes them no safer than using pointers that may be null. To improve the
situation, we must avoid calling <code>get_unsafe</code> at all, which will
lead to undefined behavior if the optional has no value. To do this, the most
basic operation is called <code>maybe</code> which acts upon the two different
cases.

\snippet optional.cpp optional_example_good

As you can see, the second lambda function gets the already dereferenced
optional value as a parameter, freeing the user from dereferencing the
optional.

\section optional_value Values

<code>fcppt::optional<T></code> is an optional value iff <code>T</code> is not
a reference type. Optional values copy or move their contents, which means that
<code>T</code> has to support copying or moving as well. Here is a small
example:

\snippet optional.cpp optional_copy

An optional value, <code>fcppt::optional<T></code>, has some special semantics,
in contrast to optional references:
<ul>
<li>It can be constructed from an <code>%fcppt::optional<T &></code> or an
<code>%fcppt::optional<T const &></code>. This has the same semantics as
constructing a <code>T</code> from a <code>T &</code> or <code>T const &</code>
with the addition that <code>has_value</code> will be preserved.</li>
<li>It can also be assigned from an <code>%fcppt::optional<T &></code> or an
<code>%fcppt::optional<T const &></code> with the same semantics.</li>
<li>Its own constness determines if it can be modified.</li>
</ul>

For optional references, see \ref optional_reference

\section optional_design Design

The goal of <code>%fcppt::optional</code>, in contrast to
<code>%boost::optional</code>, is to be as explicit as possible and to avoid
pointer semantics. The key differences include:
<ul>
<li><code>%fcppt::optional</code> does not have <code>operator-></code>,
<code>operator*</code> nor <code>operator bool</code>, so that it does not
mimic pointers.</li>
<li><code>%fcppt::optional</code> uses alignment support from the compiler
instead of relying on <code>%boost::detail::aligned_storage</code>.</li>
<li><code>fcppt::optional<T></code> does not have an implicit constructor, nor
assignment operator from <code>T</code>.</li>
<li><code>%fcppt::optional<T &></code> does not allow implicit conversions for
assignment.</li>
</ul>

\section optional_operations Common Operations

\link fcppt::maybe\endlink is the most basic function that operates on
optionals, However, some commonly needed operations arise as well. Perhaps the
most prominent operation would be the so called bind function which decomposes
an optional and creates a new one by preserving empty optionals.

\snippet optional.cpp optional_bind

There is also a shortcut for optional binds that always return a non empty
optional, called \link fcppt::optional_bind_construct\endlink.

\snippet optional.cpp optional_bind_construct

Another commonly used function is \link fcppt::from_optional\endlink. It
deconstructs an optional by either taking its value or returning a default
value.

\snippet optional.cpp from_optional

\section optional_headers Header files

<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>optional_fwd.hpp</code></td>
<td>Contains \link fcppt::optional optional's \endlink declaration.</td>
</tr>
<tr>
<td><code>optional_decl.hpp</code></td>
<td>Contains \link fcppt::optional optional's \endlink definition.</td>
</tr>
<tr>
<td><code>optional_impl.hpp</code></td>
<td>Contains the definition of \link fcppt::optional optional's \endlink member functions.</td>
</tr>
<tr>
<td><code>from_optional.hpp</code></td>
<td>Contains \link fcppt::from_optional \endlink.</td>
</tr>
<tr>
<td><code>maybe.hpp</code></td>
<td>Contains \link fcppt::maybe \endlink.</td>
</tr>
<tr>
<td><code>maybe_multi.hpp</code></td>
<td>Contains \link fcppt::maybe_multi \endlink.</td>
</tr>
<tr>
<td><code>maybe_void.hpp</code></td>
<td>Contains \link fcppt::maybe_void \endlink.</td>
</tr>
<tr>
<td><code>maybe_void_multi.hpp</code></td>
<td>Contains \link fcppt::maybe_void_multi \endlink.</td>
</tr>
<tr>
<td><code>optional_alternative.hpp</code></td>
<td>Contains \link fcppt::optional_alternative \endlink.</td>
</tr>
<tr>
<td><code>optional_assign.hpp</code></td>
<td>Contains \link fcppt::optional_assign \endlink.</td>
</tr>
<tr>
<td><code>optional_bind.hpp</code></td>
<td>Contains \link fcppt::optional_bind \endlink.</td>
</tr>
<tr>
<td><code>optional_bind_construct.hpp</code></td>
<td>Contains \link fcppt::optional_bind_construct \endlink.</td>
</tr>
<tr>
<td><code>optional_combine.hpp</code></td>
<td>Contains \link fcppt::optional_combine \endlink.</td>
</tr>
<tr>
<td><code>optional_comparison.hpp</code></td>
<td>Contains <code>operator==</code>, <code>operator!=</code> and <code>operator< </code></td>
</tr>
<tr>
<td><code>optional_from_pointer.hpp</code></td>
<td>Contains \link fcppt::optional_from_pointer \endlink.</td>
</tr>
<tr>
<td><code>optional_ref_compare.hpp</code></td>
<td>Contains \link fcppt::optional_ref_compare \endlink.</td>
</tr>
<tr>
<td><code>optional_to_exception.hpp</code></td>
<td>Contains \link fcppt::optional_to_exception \endlink.</td>
</tr>
<tr>
<td><code>const_optional_cast.hpp</code></td>
<td>Contains \link fcppt::const_optional_cast \endlink.</td>
</tr>
<tr>
<td><code>dynamic_optional_cast.hpp</code></td>
<td>Contains \link fcppt::dynamic_optional_cast \endlink.</td>
</tr>
<tr>
<td><code>static_optional_cast.hpp</code></td>
<td>Contains \link fcppt::static_optional_cast \endlink.</td>
</tr>
<tr>
<td><code>optional.hpp</code></td>
<td>Includes <code>optional_impl.hpp</code> and <code>optional_comparison.hpp</code></td>
</tr>
</table>
*/
