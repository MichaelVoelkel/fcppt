namespace fcppt
{
namespace container
{
/// Contains fcppt::container::bitfield::object and helper types/functions for it.
namespace bitfield
{
}
}
}

/**
\defgroup fcpptcontainerbitfield fcppt.container.bitfield
\ingroup fcpptcontainer
\brief A statically sized bitfield

\section bitfield_motivation Motivation

Consider the states "a person can be hungry and tired, not hungry and tired,
hungry and not tired or not hungry and not tired". Being hungry and being tired
are orthogonal states which can be implemented using the bit representation of
an enumeration:

\code
enum person_status
{
	hungry = 1,
	tired = 1 << 1,
	// insert more options here
};
\endcode

This has a multitude of problems: It abuses enums, it is tiresome to write and
it is limited by the number of bits the biggest integer type can hold. To fix
this, a bitfield is indexed by natural numbers instead of powers of two and can
hold an arbitrary (but fixed) number of bits.

\section bitfield_requirements Requirements

<code>fcppt::container::bitfield::object<ElementType, NumElements,
InternalType></code> has the following requirements:

<ul>
<li>
	<code>ElementType</code> is the element type of the bitfield which is
	used to get or set a single bit. This can be an enum or an integral
	type.
</li>
<li>
	<code>NumElements</code> is an integral constant specifying the total
	number of bits.
</li>
<li>
	An array of <code>InternalType</code> is used to hold
	<code>NumElements</code> of bits. This must be an unsigned type.
</li>
</ul>

\section bitfield_example Example

Bitfields are mostly used with enums, see \ref fcpptenum and #fcppt::container::bitfield::enum_object.

Here's a small example:

\snippet container/bitfield.cpp bitfield

As you can see, you can treat a bitfield like an integral type -- it has
bitwise <code>operator&, operator|</code> and so on. But you can also treat it
like a <code>std::map<Enum,bool></code>.
*/
