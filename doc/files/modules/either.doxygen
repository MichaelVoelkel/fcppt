namespace fcppt
{
/**
\brief Contains fcppt::either::object and helper types/functions for it
*/
namespace either
{
}
}

/**
\defgroup fcppteither fcppt.either
\ingroup fcpptmain
\brief An optional with an error type

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref either_motivation</li>
	<li>\ref either_operations</li>
	<li>\ref either_error</li>
	<li>\ref either_headers</li>
</ul>

</td>
</tr>
</table>

\section either_motivation Motivation

Either is a sum of a <em>failure</em> and a <em>success</em> type. As an
example, consider reading a series of values from a stream. The following code
tries to read an int followed by a string. If either of them fails, an
exception is thrown.

\snippet either.cpp either_read_raw

Instead of throwing an exception, we can store the exception in an either.

\snippet either.cpp either_read

This can then be used to chain both reading operations together. \link
fcppt::either::apply\endlink takes several eithers and combines them if all
contain successes. Otherwise it returns the first error.

\snippet either.cpp either_read_apply

Both \link fcpptoptional\endlink and \link fcpptvariant\endlink are closely
related to either. An optional can be thought of as an either with an empty
failure type, while a variant generalizes sum types but assigns their
components no special meaning.

\section either_operations Operations

As seen in the introduction, multiple eithers can be combined together using
\link fcppt::either::apply\endlink. The more basic function \link
fcppt::either::map\endlink operates on a single either.

Notice that the example given in the introduction makes use of the fact that an
<code>istream</code> can enter the <code>fail</code> state in which all future
operations will fail as well. Therefore, it is possible to read multiple
eithers from a stream and then combine them together. Imagine this was not
possible and it would be an error to continue reading from a failed stream. We
would need an operation that not only chains eithers together but also dictates
how they are produced. This is done by \link fcppt::either::bind\endlink:

\snippet either.cpp either_read_bind

The most basic function that acts on the two cases of an either is \link
fcppt::either::match\endlink. Again, consider the function from the
introduction.

\snippet either.cpp either_match

Alternatively, there is the convenience function \link
fcppt::either::to_exception\endlink that throws an exception in case of an
error:

\snippet either.cpp either_to_exception

\section either_error Errors

When functions return optional errors but <em>no success</em> values, it is more
convenient to handle such cases as eithers. An \link fcppt::either::error\endlink
is an either with a success type that only has one value, which is
\link fcppt::unit\endlink. For example:

\snippet either.cpp either_error

\section either_headers Header files

<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>object_fwd.hpp</code></td>
<td>Contains \link fcppt::either::object either's \endlink declaration.</td>
</tr>
<tr>
<td><code>object_decl.hpp</code></td>
<td>Contains \link fcppt::either::object either's \endlink definition.</td>
</tr>
<tr>
<td><code>object_impl.hpp</code></td>
<td>Contains the definition of \link fcppt::either::object either's \endlink member functions.</td>
</tr>
<tr>
<td><code>object.hpp</code></td>
<td>Includes <code>object_impl.hpp</code> and <code>comparison.hpp</code>.</td>
</tr>
<tr>
<td><code>apply.hpp</code></td>
<td>Contains \link fcppt::either::apply\endlink.</td>
</tr>
<tr>
<td><code>bind.hpp</code></td>
<td>Contains \link fcppt::either::bind\endlink.</td>
</tr>
<tr>
<td><code>comparison.hpp</code></td>
<td>Contains <code>operator==</code> and <code>operator!=</code>.</td>
</tr>
<tr>
<td><code>error_fwd.hpp</code></td>
<td>Contains \link fcppt::either::error error's \endlink declaration.</td>
</tr>
<tr>
<td><code>error.hpp</code></td>
<td>Contains \link fcppt::either::error error's \endlink definition.</td>
</tr>
<tr>
<td><code>error_from_optional.hpp</code></td>
<td>Contains \link fcppt::either::error_from_optional\endlink.</td>
</tr>
<tr>
<td><code>failure_opt.hpp</code></td>
<td>Contains \link fcppt::either::failure_opt\endlink.</td>
</tr>
<tr>
<td><code>first_success.hpp</code></td>
<td>Contains \link fcppt::either::first_success\endlink.</td>
</tr>
<tr>
<td><code>fold_error.hpp</code></td>
<td>Contains \link fcppt::either::fold_error\endlink.</td>
</tr>
<tr>
<td><code>from_optional.hpp</code></td>
<td>Contains \link fcppt::either::from_optional\endlink.</td>
</tr>
<tr>
<td><code>make_failure.hpp</code></td>
<td>Contains \link fcppt::either::make_failure\endlink.</td>
</tr>
<tr>
<td><code>make_success.hpp</code></td>
<td>Contains \link fcppt::either::make_success\endlink.</td>
</tr>
<tr>
<td><code>map.hpp</code></td>
<td>Contains \link fcppt::either::map\endlink.</td>
</tr>
<tr>
<td><code>map_failure.hpp</code></td>
<td>Contains \link fcppt::either::map_failure\endlink.</td>
</tr>
<tr>
<td><code>match.hpp</code></td>
<td>Contains \link fcppt::either::match\endlink.</td>
</tr>
<tr>
<td><code>no_error_fwd.hpp</code></td>
<td>Contains \link fcppt::either::no_error no_error's \endlink declaration.</td>
</tr>
<tr>
<td><code>no_error.hpp</code></td>
<td>Contains \link fcppt::either::no_error no_error's \endlink definition.</td>
</tr>
<tr>
<td><code>output.hpp</code></td>
<td>Contains <code>operator<<</code>.</td>
</tr>
<tr>
<td><code>sequence.hpp</code></td>
<td>Contains \link fcppt::either::sequence\endlink.</td>
</tr>
<tr>
<td><code>success_opt.hpp</code></td>
<td>Contains \link fcppt::either::success_opt\endlink.</td>
</tr>
<tr>
<td><code>to_exception.hpp</code></td>
<td>Contains \link fcppt::either::to_exception\endlink.</td>
</tr>
<tr>
<td><code>try_call.hpp</code></td>
<td>Contains \link fcppt::either::try_call\endlink.</td>
</tr>
</table>
*/
