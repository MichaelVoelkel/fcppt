namespace fcppt
{
/**
\brief Contains fcppt::either::object and helper types/functions for it
*/
namespace either
{
}
}

/**
\defgroup fcppteither fcppt.either
\ingroup fcpptmain
\brief An optional with an error type

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref either_motivation</li>
	<li>\ref either_operations</li>
	<li>\ref either_error</li>
	<li>\ref either_headers</li>
</ul>

</td>
</tr>
</table>

\section either_motivation Motivation

Either is a sum of a <em>failure</em> and a <em>success</em> type. As an
example, consider reading a series of values from a stream. The following code
tries to read an int followed by a string. If either of them fails, an
exception is thrown.

\snippet either.cpp either_read_raw

Instead of throwing an exception, we can store the exception in an either.

\snippet either.cpp either_read

This can then be used to chain both reading operations together. #fcppt::either::apply takes several eithers and combines them if all
contain successes. Otherwise it returns the first error.

\snippet either.cpp either_read_apply

Both \ref fcpptoptional and \ref fcpptvariant are closely
related to either. An optional can be thought of as an either with an empty
failure type, while a variant generalizes sum types but assigns their
components no special meaning.

\section either_operations Operations

As seen in the introduction, multiple eithers can be combined together using
#fcppt::either::apply. The more basic function #fcppt::either::map operates on a single either.

Notice that the example given in the introduction makes use of the fact that an
<code>istream</code> can enter the <code>fail</code> state in which all future
operations will fail as well. Therefore, it is possible to read multiple
eithers from a stream and then combine them together. Imagine this was not
possible and it would be an error to continue reading from a failed stream. We
would need an operation that not only chains eithers together but also dictates
how they are produced. This is done by #fcppt::either::bind:

\snippet either.cpp either_read_bind

The most basic function that acts on the two cases of an either is #fcppt::either::match. Again, consider the function from the introduction.

\snippet either.cpp either_match

Alternatively, there is the convenience function #fcppt::either::to_exception that throws an exception in case of an error:

\snippet either.cpp either_to_exception

\section either_error Errors

When functions return optional errors but <em>no success</em> values, it is more
convenient to handle such cases as eithers. An #fcppt::either::error
is an either with a success type that only has one value, which is
#fcppt::unit. For example:

\snippet either.cpp either_error

\section either_headers Header files

<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>object_fwd.hpp</code></td>
<td>Contains #fcppt::either::object either's  declaration.</td>
</tr>
<tr>
<td><code>object_decl.hpp</code></td>
<td>Contains #fcppt::either::object either's  definition.</td>
</tr>
<tr>
<td><code>object_impl.hpp</code></td>
<td>Contains the definition of #fcppt::either::object either's  member functions.</td>
</tr>
<tr>
<td><code>object.hpp</code></td>
<td>Includes <code>object_impl.hpp</code> and <code>comparison.hpp</code>.</td>
</tr>
<tr>
<td><code>apply.hpp</code></td>
<td>Contains #fcppt::either::apply.</td>
</tr>
<tr>
<td><code>bind.hpp</code></td>
<td>Contains #fcppt::either::bind.</td>
</tr>
<tr>
<td><code>comparison.hpp</code></td>
<td>Contains <code>operator==</code> and <code>operator!=</code>.</td>
</tr>
<tr>
<td><code>error_fwd.hpp</code></td>
<td>Contains #fcppt::either::error error's  declaration.</td>
</tr>
<tr>
<td><code>error.hpp</code></td>
<td>Contains #fcppt::either::error error's  definition.</td>
</tr>
<tr>
<td><code>error_from_optional.hpp</code></td>
<td>Contains #fcppt::either::error_from_optional.</td>
</tr>
<tr>
<td><code>failure_opt.hpp</code></td>
<td>Contains #fcppt::either::failure_opt.</td>
</tr>
<tr>
<td><code>first_success.hpp</code></td>
<td>Contains #fcppt::either::first_success.</td>
</tr>
<tr>
<td><code>from_optional.hpp</code></td>
<td>Contains #fcppt::either::from_optional.</td>
</tr>
<tr>
<td><code>make_failure.hpp</code></td>
<td>Contains #fcppt::either::make_failure.</td>
</tr>
<tr>
<td><code>make_success.hpp</code></td>
<td>Contains #fcppt::either::make_success.</td>
</tr>
<tr>
<td><code>map.hpp</code></td>
<td>Contains #fcppt::either::map.</td>
</tr>
<tr>
<td><code>map_failure.hpp</code></td>
<td>Contains #fcppt::either::map_failure.</td>
</tr>
<tr>
<td><code>match.hpp</code></td>
<td>Contains #fcppt::either::match.</td>
</tr>
<tr>
<td><code>no_error_fwd.hpp</code></td>
<td>Contains #fcppt::either::no_error no_error's  declaration.</td>
</tr>
<tr>
<td><code>no_error.hpp</code></td>
<td>Contains #fcppt::either::no_error no_error's  definition.</td>
</tr>
<tr>
<td><code>output.hpp</code></td>
<td>Contains <code>operator<<</code>.</td>
</tr>
<tr>
<td><code>sequence.hpp</code></td>
<td>Contains #fcppt::either::sequence.</td>
</tr>
<tr>
<td><code>sequence_error.hpp</code></td>
<td>Contains #fcppt::either::sequence_error.</td>
</tr>
<tr>
<td><code>success_opt.hpp</code></td>
<td>Contains #fcppt::either::success_opt.</td>
</tr>
<tr>
<td><code>to_exception.hpp</code></td>
<td>Contains #fcppt::either::to_exception.</td>
</tr>
<tr>
<td><code>try_call.hpp</code></td>
<td>Contains #fcppt::either::try_call.</td>
</tr>
</table>
*/
