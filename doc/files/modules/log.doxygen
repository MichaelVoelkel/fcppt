/**
\defgroup fcpptlog Log
\ingroup fcpptmain
\brief Logging classes and functions

<table id="toc">
<tr>
<td>

<ol>
	<li>\ref log_introduction</li>
		<ol>
			<li>\ref log_simple_example</li>
		</ol>
	<li>\ref log_formatting_and_sinks</li>
		<ol>
			<li>\ref log_design</li>
			<li>\ref log_formatting_example</li>
		</ol>
	<li>\ref log_controlling</li>
		<ol>
			<li>\ref log_context_example</li>
			<li>\ref log_context_complex</li>
		</ol>
	<li>\ref log_headers</li>
</ol>

</td>
</tr>
</table>

\section log_introduction Introduction

Logging in general means that information describing aspects of a program's
execution is printed out, for example to a file that can be examined later.
Such log messages usually contain information about what went wrong, what might
possibly have lead to that, or even general information about which functions
were executed. There are usually several aspects to consider:

<dl>
<dt>Where the output is written to</dt>

<dd>This can include the standard output streams
(<code>std::cout</code>,<code>std::cerr</code> and so on), a file, a console,
etc.</dd>

<dt>Which messages get written</dt>

<dd>This is usually controlled through so called <em>log levels</em>, for
example: debug, info, warning, error. Also, you might want to enable output
from certain subsystems while you disable output from others. Therefore, there
must exist a mechanism that allows for easy enabling and disabling of loggers
at runtime.</dd>

<dt>How messages are formatted</dt>

<dd>There should be a way of describing where the log message originated from,
which means which class or function emitted it. Also, the logging level should
be printed.</dd>

</dl>

\subsection log_simple_example A simple example

In fcppt, the central class for logging is a so called logger object. It
stores where it logs to, which log levels are active, and if it is itself
enabled. It also controls how log messages are formatted.

The following example illustrates the construction of a simple logger object
with some defaults and logs to it.

\snippet log/helloworld.cpp helloworld

Logging is done via the \link fcppt::log::object::log \endlink element
function. The macro <code>FCPPT_LOG_DEBUG</code> is a short hand for logging
only if the debug log level is enabled. This is important because the
construction of the log message is avoided altogether when debug is not
enabled.

\link fcppt::log::_ \endlink is a trampoline object that constructs something
that can be written to like an <code>std::basic_ostream</code>. This is used to
create a whole message in a threadsafe manner. If you log in multiple pieces
instead, the log message might end up interleaved with other messages.

\link fcppt::log::parameters::object::level_defaults \endlink is a convenience
function that tells the logger to enable all log levels for a given log level
and above. It also gets a stream that all levels will log to, using default
formatting.

\section log_formatting_and_sinks Formatting and sinks

\subsection log_design General design

Here is a more detailed explanation of fcppt::log's design, regarding where
output is directed and how it is formatted.

<ul>
<li>
Each logger object contains a sink for every log level. Such a sink controls
where output is written to and how it is formatted.
</li>
<li>
Each sink uses an <code>std::basic_ostream</code> as its log destination.
Where output actually ends up is decided by its streambuf.
</li>
<li>
The following log levels, declared in \link fcppt::log::level \endlink, are
provided in ascending order: <code>verbose, debug, info, warning, error,
fatal</code>. The lower the level, the less serious the message.
</li>
<li>
Formatting is done through \link fcppt::log::format::function \endlink objects
which can be naturally chained together. Every logger object and every sink for
each log level can have their own formatters.
</ul>

\subsection log_formatting_example Formatting and sinks example

In the following example, we are going to give our logger object a special
formatting function that prints <code>This is a formatting test: </code> in
front of every log message.

Such a formatting function takes a string and returns a string and can be
implemented as follows:

\snippet log/formatting.cpp logger_formatter_declaration

We are also going to create another formatting function for the <em>error</em>
output sink.

\snippet log/formatting.cpp error_formatter_declaration

We can then specify our logger formatting function for the logger, using \link
fcppt::log::parameters::object::formatter \endlink. We also change the level
for the <em>error</em> log level, redirecting it to \link fcppt::io::cerr
\endlink and giving it a different formatting function, using \link
fcppt::log::parameters::object::level_stream \endlink.

\snippet log/formatting.cpp logger_declaration

The following code shows what is printed:

\snippet log/formatting.cpp log_print

\section log_controlling Controlling loggers

Controlling at runtime which messages are logged is very important. Under
normal circumstances, you probably want to only log serious problems, while in
a debugging scenario a lot more should be logged. Which messages are logged
can be controlled for every individual logger object. The major problem is how
to <em>access</em> them at runtime.

\link fcppt::log::context \endlink is a class that refers to logger objects in
a hierarchy. This hierarchy is formed by \link fcppt::log::location \endlink
objects, which simply wrap a vector of strings which we use as a path along the
tree.

\subsection log_context_example An example using contexts

First, we are going to see how logger objects, contexts and locations can be
used together.

A logger context is a class that can be passed to other loggers, while also
giving them a corresponding location in the context. Until the logger object is
destroyed, it will be part of the context.

\snippet log/context.cpp declare_context

The root logger gets the location <code>"::root"</code>

\snippet log/context.cpp declare_root_logger

The child logger gets the location <code>"::root::child"</code>

\snippet log/context.cpp declare_child_logger

We can now manipulate the loggers through the context using their locations.
The \link fcppt::log::context::apply \endlink function can be used to
recursively manipulate loggers starting at a given location. If we pass the
location <code>"::root"</code> then the root and the child logger will both be
manipulated. It is also possible to manipulate a single logger, though this is
rarely needed.

\snippet log/context.cpp enable_loggers

The log location given to a logger implicitly changes how its output is
formatted.

\snippet log/context.cpp print

The first statement will print <code>root: warning: Print from root.</code> and
the second statement will print <code>root: child: warning: Print from
child.</code>

\subsection log_context_complex A real world approach

Usually, loggers are declared globally (in a namespace), so that they
are local to a subsystem or even a translation unit.

The reason why the context stores logger objects only through locations is
C++'s weak guarantees of global initialization. If loggers would refer to each
other instead, then we would have a problem, because the order in which global
objects are constructed is unspecified. The context, however, is the only thing
the logger objects refer to during their construction. Therefore, it must be
treated with special care. Using a context and global loggers generally works
as follows:

<ul>
<li>Construct a global function with a static context in it, which returns the
context. In this example, this function is called
<code>log_context()</code></li>

<li>Globally declare all loggers which only refer to <code>log_context()</code>
and a location in their constructors, thereby adding themselves to the
context.</li>

<li>Manipulate the desired log object(s) using <code>log_context()</code> and a
location.</li>
</ul>

In the following example, our engine should get several loggers for its
subsystems.

First, we declare the logger context function.

\snippet log/complex.cpp context_declaration

Using a macro provided by fcppt, we can define the logger context function
declared above. This macro creates a function embedding a static logger
context.

\snippet log/complex.cpp context_definition

The next thing we are going to do is to make a helper function that constructs
logger parameters given a logger location. This is only to avoid duplicated
code and could be omitted.

\snippet log/complex.cpp logger_parameters

We are also going to abstract the log location of the main namespace using a
function, again to avoid code duplication. Note that this cannot be a constant
with external linkage, because this would again create the global
initialization order problem we are trying to avoid.

\snippet log/complex.cpp engine_location

The engine's root logger should be accessible through a function.

\snippet log/complex.cpp declare_engine_root_logger

The definition should be done in a separate translation unit.

\snippet log/complex.cpp define_engine_root_logger

We are also going to create two more loggers, one for the renderer subsystem
and one for the audio subsystem.

\snippet log/complex.cpp declare_subsystem_loggers

Finally, we also define the subsystem loggers.

\snippet log/complex.cpp define_subsystem_loggers

The following program illustrates how the different loggers can be manipulated
at runtime by only using the log context. The program activates every subsystem
whose name is passed in <code>argv</code>.

\snippet log/complex.cpp main

We can also print which loggers are available in a logger context.

\snippet log/complex.cpp print_locations

\section log_headers Header files
All headers are relative to the log subdirectory.

\subsection log_headers_essential Essential header files
<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>context_fwd.hpp</code></td>
<td>Contains \link fcppt::log::context \endlink's declaration.</td>
</tr>
<tr>
<td><code>context.hpp</code></td>
<td>Contains \link fcppt::log::context \endlink's definition.</td>
</tr>
<tr>
<td><code>debug.hpp</code></td>
<td>Contains the <code>FCPPT_LOG_DEBUG</code> macro.</td>
</tr>
<tr>
<td><code>define_context.hpp</code></td>
<td>Contains the <code>FCPPT_LOG_DEFINE_CONTEXT</code> macro for defining \link fcppt::log::context \endlink getter functions.</td>
</tr>
<tr>
<td><code>error.hpp</code></td>
<td>Contains the <code>FCPPT_LOG_ERROR</code> macro.</td>
</tr>
<tr>
<td><code>fatal.hpp</code></td>
<td>Contains the <code>FCPPT_LOG_FATAL</code> macro.</td>
</tr>
<tr>
<td><code>headers.hpp</code></td>
<td>Includes <code>macros.hpp</code> and <code>output.hpp</code>.</td>
</tr>
<tr>
<td><code>info.hpp</code></td>
<td>Contains the <code>FCPPT_LOG_INFO</code> macro.</td>
</tr>
<tr>
<td><code>level.hpp</code></td>
<td>Contains the \link fcppt::log::level \endlink enumeration.</td>
</tr>
<tr>
<td><code>location_fwd.hpp</code></td>
<td>Contains \link fcppt::log::location \endlink's declaration.</td>
</tr>
<tr>
<td><code>location.hpp</code></td>
<td>Contains \link fcppt::log::location \endlink's definition.</td>
</tr>
<tr>
<td><code>log.hpp</code></td>
<td>Includes all log headers.</td>
</tr>
<tr>
<td><code>macros.hpp</code></td>
<td>Includes <code>debug.hpp, error.hpp, fatal.hpp, info.hpp, verbose.hpp, warning.hpp</code>.</td>
</tr>
<tr>
<td><code>object_fwd.hpp</code></td>
<td>Contains \link fcppt::log::object \endlink's declaration.</td>
</tr>
<tr>
<td><code>object.hpp</code></td>
<td>Contains \link fcppt::log::object \endlink's defintiion.</td>
</tr>
<tr>
<td><code>output.hpp</code></td>
<td>Contains the necessary things to use \link fcppt::log::_ \endlink.</td>
</tr>
<tr>
<td><code>trampoline.hpp</code></td>
<td>Contains \link fcppt::log::_ \endlink.</td>
</tr>
<tr>
<td><code>verbose.hpp</code></td>
<td>Contains the <code>FCPPT_LOG_VERBOSE</code> macro.</td>
</tr>
<tr>
<td><code>warning.hpp</code></td>
<td>Contains the <code>FCPPT_LOG_WARNING</code> macro.</td>
</tr>
<tr>
<td><code>parameters/object_fwd.hpp</code></td>
<td>Contains \link fcppt::log::parameters::object \endlink's declaration.</td>
</tr>
<tr>
<td><code>parameters/object.hpp</code></td>
<td>Contains \link fcppt::log::parameters::object \endlink's definition.</td>
</tr>
</table>

\subsection log_headers_helpers Other header files

<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>activate_levels.hpp</code></td>
<td>Contains \link fcppt::log::activate_levels \endlink which can enable multiple log levels.</td>
</tr>
<tr>
<td><code>context_location_fwd.hpp</code></td>
<td>Contains \link fcppt::log::context_location \endlink's declaration.</td>
</tr>
<tr>
<td><code>context_location.hpp</code></td>
<td>Contains \link fcppt::log::context_location \endlink's definition.</td>
</tr>
<tr>
<td><code>deactivate_levels.hpp</code></td>
<td>Contains \link fcppt::log::deactivate_levels \endlink which can disable multiple log levels.</td>
</tr>
<tr>
<td><code>default_level_streams.hpp</code></td>
<td>Contains \link fcppt::log::default_level_streams \endlink for construction of all level stream defaults.</td>
</tr>
<tr>
<td><code>enabled_level_array.hpp</code></td>
<td>Contains the \link fcppt::log::enabled_level_array \endlink typedef.</td>
</tr>
<tr>
<td><code>enabled_levels.hpp</code></td>
<td>Contains the \link fcppt::log::enabled_levels \endlink helper function to create an array of certain enabled levels.</td>
</tr>
<tr>
<td><code>exception.hpp</code></td>
<td>Contains \link fcppt::log::exception \endlink.</td>
</tr>
<tr>
<td><code>global.hpp</code></td>
<td>Contains fcppt's global logger.</td>
</tr>
<tr>
<td><code>level_from_string.hpp</code></td>
<td>Contains \link fcppt::log::level_from_string \endlink.</td>
</tr>
<tr>
<td><code>level_stream_array.hpp</code></td>
<td>Contains the \link fcppt::log::level_stream_array \endlink typedef.</td>
</tr>
<tr>
<td><code>level_stream_fwd.hpp</code></td>
<td>Contains \link fcppt::log::level_stream \endlink's declaration.</td>
</tr>
<tr>
<td><code>level_stream.hpp</code></td>
<td>Contains \link fcppt::log::level_stream \endlink's definition.</td>
</tr>
<tr>
<td><code>level_stream_ptr.hpp</code></td>
<td>Contains the \link fcppt::log::level_stream_ptr \endlink typedef.</td>
</tr>
<tr>
<td><code>level_to_string.hpp</code></td>
<td>Contains \link fcppt::log::level_to_string \endlink.</td>
</tr>
<tr>
<td><code>make_location.hpp</code></td>
<td>Contains \link fcppt::log::make_location \endlink.</td>
</tr>
<tr>
<td><code>no_such_location.hpp</code></td>
<td>Contains the \link fcppt::log::no_such_location \endlink exception.</td>
</tr>
<tr>
<td><code>optional_object_fwd.hpp</code></td>
<td>Contains the \link fcppt::log::optional_object \endlink typedef.</td>
</tr>
<tr>
<td><code>optional_object.hpp</code></td>
<td>Includes <code>optional_object_fwd.hpp</code> and optional headers.</td>
</tr>
<tr>
<td><code>optional_location_fwd.hpp</code></td>
<td>Contains the \link fcppt::log::optional_location \endlink typedef.</td>
</tr>
<tr>
<td><code>optional_location.hpp</code></td>
<td>Includes <code>optional_location_fwd.hpp</code> and optional headers.</td>
</tr>
<tr>
<td><code>print_locations.hpp</code></td>
<td>Contains \link fcppt::log::print_locations \endlink.</td>
</tr>
<tr>
<td><code>tree_function.hpp</code></td>
<td>Contains the \link fcppt::log::tree_function \endlink typedef.</td>
</tr>
<tr>
<td><code>parameters/with_context.hpp</code></td>
<td>Contains the \link fcppt::log::parameters::with_context \endlink helper function.</td>
</tr>
<tr>
<td><code>format/chain.hpp</code></td>
<td>Contains the \link fcppt::log::format::chain \endlink function.</td>
</tr>
<tr>
<td><code>format/create_chain.hpp</code></td>
<td>Contains the \link fcppt::log::format::create_chain \endlink function.</td>
</tr>
<tr>
<td><code>format/create_inserter.hpp</code></td>
<td>Contains the \link fcppt::log::format::create_inserter \endlink function.</td>
</tr>
<tr>
<td><code>format/create_prefix.hpp</code></td>
<td>Contains the \link fcppt::log::format::create_prefix \endlink function.</td>
</tr>
<tr>
<td><code>format/create_time_stamp.hpp</code></td>
<td>Contains the \link fcppt::log::format::create_time_stamp \endlink function.</td>
</tr>
<tr>
<td><code>format/default_level.hpp</code></td>
<td>Contains the \link fcppt::log::format::default_level \endlink function.</td>
</tr>
<tr>
<td><code>format/format.hpp</code></td>
<td>Includes all headers of <code>log/format</code>.</td>
</tr>
<tr>
<td><code>format/function_fwd.hpp</code></td>
<td>Contains the \link fcppt::log::format::function \endlink typedef.</td>
</tr>
<tr>
<td><code>format/function.hpp</code></td>
<td>Includes <code>format/function_fwd.hpp</code> and function headers.</td>
</tr>
<tr>
<td><code>format/inserter.hpp</code></td>
<td>Contains the \link fcppt::log::format::inserter \endlink typedef.</td>
</tr>
<tr>
<td><code>format/time_stamp.hpp</code></td>
<td>Contains the \link fcppt::log::format::time_stamp \endlink typedef.</td>
</tr>
</table>

*/
