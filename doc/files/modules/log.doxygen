/**
\defgroup fcpptlog fcppt.log
\ingroup fcpptmain
\brief Logging classes and functions

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref log_introduction</li>
		<ul>
			<li>\ref log_simple_example</li>
		</ul>
	<li>\ref log_formatting_and_sinks</li>
		<ul>
			<li>\ref log_design</li>
			<li>\ref log_formatting_example</li>
		</ul>
	<li>\ref log_controlling</li>
	<li>\ref log_headers</li>
</ul>

</td>
</tr>
</table>

\section log_introduction Introduction

Logging in general means that information describing aspects of a program's
execution is printed out, for example to a file that can be examined later.
Such log messages usually contain information about what went wrong, what might
possibly have lead to that, or even general information about which functions
were executed. There are usually several aspects to consider:

<dl>
<dt>Where the output is written to</dt>

<dd>This can include the standard output streams
(<code>std::cout</code>,<code>std::cerr</code> and so on), a file, a console,
etc.</dd>

<dt>Which messages get written</dt>

<dd>This is usually controlled through so called <em>log levels</em>, for
example: debug, info, warning, error. Also, you might want to enable output
from certain subsystems while you disable output from others. Therefore, there
must exist a mechanism that allows for easy enabling and disabling of loggers
at runtime.</dd>

<dt>How messages are formatted</dt>

<dd>There should be a way of describing where the log message originated from,
which means which class or function emitted it. Also, the logging level should
be printed.</dd>

</dl>

\subsection log_simple_example A simple example

In fcppt, the two central classes for logging are \link fcppt::log::object\endlink, which
stores where it logs to and how log messages are formatted, and \link fcppt::log::context\endlink,
which stores the active <em>locations</em>.

The following example illustrates the construction of a simple logger object
with some defaults and logs to it.

\snippet log/helloworld.cpp helloworld

Logging is done via the \link fcppt::log::object::log \endlink element
function. The macro \link FCPPT_LOG_DEBUG\endlink is a short-hand for logging
only if the debug log level is enabled. This is important because the
construction of the log message is avoided altogether when debug is not
enabled.

\link fcppt::log::_ \endlink is an object that basically acts like
a <code>std::basic_ostream</code>. This is used to
create a whole message in a thread-safe manner. If you log in multiple pieces
instead, the log message might end up interleaved with other messages.

The constructor of \link fcppt::log::parameters \endlink tells the logger to
use <code>fcppt</code> as its log location and to use \link fcppt::io::cout\endlink
for all levels.

\section log_formatting_and_sinks Formatting and sinks

\subsection log_design General design

Here is a more detailed explanation of fcppt::log's design,
regarding where output is directed and how it is formatted.

<ul>
<li>
Each logger object contains an \link fcppt::log::level_stream\endlink for every
log level. Each of them controls where output is written to and how it is
formatted.
</li>
<li>
Each level stream uses an <code>std::basic_ostream</code> as its log
destination.  Where output actually ends up is decided by its streambuf.
</li>
<li>
The following log levels, declared in \link fcppt::log::level \endlink, are
provided in ascending order: <code>verbose, debug, info, warning, error,
fatal</code>. The lower the level, the less serious the message.
</li>
<li>
Formatting is done through \link fcppt::log::format::function \endlink objects
which can be naturally chained together. Every logger object and every level stream
can have their own formatters.
</ul>

\subsection log_formatting_example Formatting and sinks example

In the following example, we are going to give our logger object a special
formatting function that prints <code>This is a formatting test: </code> in
front of every log message.

Such a formatting function takes a string and returns a string and can be
implemented as follows:

\snippet log/formatting.cpp logger_formatter_declaration

We are also going to create another formatting function for the <em>error</em>
output sink that logs to \link fcppt::io::cerr\endlink.

\snippet log/formatting.cpp error_formatter_declaration

We then create the level streams using the error function for the error level.
Every other level logs to \link fcppt::io::cout\endlink using the default
formatting function.

\snippet log/formatting.cpp logger_streams

Finally, we create the logger object that uses the aforementioned formatting
function and the created level streams:

\snippet log/formatting.cpp logger_declaration

The following code shows what is printed:

\snippet log/formatting.cpp log_print

\section log_controlling Controlling loggers

Controlling at runtime which messages are logged is very important. Under
normal circumstances, you probably want to only log serious problems, while in
a debugging scenario a lot more should be logged. Which messages are logged can
be controlled for every individual <em>location</em>. A location is list of
strings, e.g. <code>{ "my_lib", "my_subsystem" }</code>.  \link
fcppt::log::context \endlink stores locations in a tree, together with \link
fcppt::log::setting\endlink objects.  It gets a single \link
fcppt::log::setting\endlink as its parameter, which be used as a default for
every location.

The next example shows how logger objects, contexts and locations can be used
together.

\snippet log/context.cpp declare_context

We declare a root logger with location <code>"::root"</code>

\snippet log/context.cpp declare_root_logger

The child logger gets the location <code>"::root::child"</code>

\snippet log/context.cpp declare_child_logger

As mentioned earlier, the locations inherit the root setting of the context, so
every logger currently has the debug level and all levels above enabled: The
log location given to a logger implicitly changes how its output is formatted:

\snippet log/context.cpp log_debug

The first statement will print <code>root: warning: Print from root.</code> and
the second statement will print <code>root: child: warning: Print from
child.</code>

The \link fcppt::log::context::set\endlink can be used to change the settings
of a location at runtime.

\snippet log/context.cpp context_set

Here we change the <code>child_location</code> to only have the warning level
and every level above enabled, so the following output is not printed:

\snippet log/context.cpp log_info

Note that changing the settings at a location also changes the settings below
it. We can change the root level back to debug which will also affect the child
level:

\snippet log/context.cpp context_set2

\section log_headers Header files
All headers are relative to the log subdirectory.

\subsection log_headers_essential Essential header files
<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>_.hpp</code></td>
<td>Contains \link fcppt::log::_ \endlink.</td>
</tr>
<tr>
<td><code>context_fwd.hpp</code></td>
<td>Contains \link fcppt::log::context \endlink's declaration.</td>
</tr>
<tr>
<td><code>context.hpp</code></td>
<td>Contains \link fcppt::log::context \endlink's definition.</td>
</tr>
<tr>
<td><code>debug.hpp</code></td>
<td>Contains the \link FCPPT_LOG_DEBUG\endlink macro.</td>
</tr>
<tr>
<td><code>error.hpp</code></td>
<td>Contains the \link FCPPT_LOG_ERROR\endlink macro.</td>
</tr>
<tr>
<td><code>fatal.hpp</code></td>
<td>Contains the \link FCPPT_LOG_FATAL\endlink macro.</td>
</tr>
<tr>
<td><code>info.hpp</code></td>
<td>Contains the \link FCPPT_LOG_INFO\endlink macro.</td>
</tr>
<tr>
<td><code>level.hpp</code></td>
<td>Contains the \link fcppt::log::level \endlink enumeration.</td>
</tr>
<tr>
<td><code>location_fwd.hpp</code></td>
<td>Contains \link fcppt::log::location \endlink's declaration.</td>
</tr>
<tr>
<td><code>location.hpp</code></td>
<td>Contains \link fcppt::log::location \endlink's definition.</td>
</tr>
<tr>
<td><code>location_setting_fwd.hpp</code></td>
<td>Contains \link fcppt::log::location_setting \endlink's declaration.</td>
</tr>
<tr>
<td><code>location_setting.hpp</code></td>
<td>Contains \link fcppt::log::location_setting \endlink's definition.</td>
</tr>
<tr>
<td><code>object_fwd.hpp</code></td>
<td>Contains \link fcppt::log::object \endlink's declaration.</td>
</tr>
<tr>
<td><code>object.hpp</code></td>
<td>Contains \link fcppt::log::object \endlink's defintiion.</td>
</tr>
<tr>
<td><code>parameters_fwd.hpp</code></td>
<td>Contains \link fcppt::log::parameters \endlink's declaration.</td>
</tr>
<tr>
<td><code>parameters.hpp</code></td>
<td>Contains \link fcppt::log::parameters \endlink's definition.</td>
</tr>
<tr>
<td><code>setting_fwd.hpp</code></td>
<td>Contains \link fcppt::log::setting \endlink's declaration.</td>
</tr>
<tr>
<td><code>setting.hpp</code></td>
<td>Contains \link fcppt::log::setting \endlink's definition.</td>
</tr>
<tr>
<td><code>verbose.hpp</code></td>
<td>Contains the \link FCPPT_LOG_VERBOSE\endlink macro.</td>
</tr>
<tr>
<td><code>warning.hpp</code></td>
<td>Contains the \link FCPPT_LOG_WARNING\endlink macro.</td>
</tr>
</table>

\subsection log_headers_helpers Other header files

<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>default_level_streams.hpp</code></td>
<td>Contains \link fcppt::log::default_level_streams \endlink for construction of all level stream defaults.</td>
</tr>
<tr>
<td><code>enabled_level_array.hpp</code></td>
<td>Contains the \link fcppt::log::enabled_level_array \endlink typedef.</td>
</tr>
<tr>
<td><code>enabled_levels.hpp</code></td>
<td>Contains the \link fcppt::log::enabled_levels \endlink helper function to create an array of enabled levels equal
or greater to a certain level.</td>
</tr>
<tr>
<td><code>level_from_string.hpp</code></td>
<td>Contains \link fcppt::log::level_from_string \endlink.</td>
</tr>
<tr>
<td><code>level_stream_array.hpp</code></td>
<td>Contains the \link fcppt::log::level_stream_array \endlink typedef.</td>
</tr>
<tr>
<td><code>level_stream_fwd.hpp</code></td>
<td>Contains \link fcppt::log::level_stream \endlink's declaration.</td>
</tr>
<tr>
<td><code>level_stream.hpp</code></td>
<td>Contains \link fcppt::log::level_stream \endlink's definition.</td>
</tr>
<tr>
<td><code>level_to_string.hpp</code></td>
<td>Contains \link fcppt::log::level_to_string \endlink.</td>
</tr>
<tr>
<td><code>optional_level_fwd.hpp</code></td>
<td>Contains the \link fcppt::log::optional_level \endlink typedef.</td>
</tr>
<tr>
<td><code>optional_level.hpp</code></td>
<td>Includes <code>optional_level_fwd.hpp</code> and optional headers.</td>
</tr>
<tr>
<td><code>format/chain.hpp</code></td>
<td>Contains the \link fcppt::log::format::chain \endlink function.</td>
</tr>
<tr>
<td><code>format/default_level.hpp</code></td>
<td>Contains the \link fcppt::log::format::default_level \endlink function.</td>
</tr>
<tr>
<td><code>format/format.hpp</code></td>
<td>Includes all headers of <code>log/format</code>.</td>
</tr>
<tr>
<td><code>format/function_fwd.hpp</code></td>
<td>Contains the \link fcppt::log::format::function \endlink typedef.</td>
</tr>
<tr>
<td><code>format/function.hpp</code></td>
<td>Includes <code>format/function_fwd.hpp</code> and function headers.</td>
</tr>
<tr>
<td><code>format/inserter.hpp</code></td>
<td>Contains the \link fcppt::log::format::inserter \endlink typedef.</td>
</tr>
<tr>
<td><code>format/prefix.hpp</code></td>
<td>Contains the \link fcppt::log::format::prefix \endlink function.</td>
</tr>
<tr>
<td><code>format/time_stamp.hpp</code></td>
<td>Contains the \link fcppt::log::format::time_stamp \endlink typedef.</td>
</tr>
</table>

*/

namespace fcppt
{
/**
\brief Logging classes and functions
*/
namespace log
{
/**
\brief Functions and classes related to log formatting
*/
namespace format
{
}

}
}
