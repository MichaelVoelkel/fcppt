/**
\defgroup fcpptlog fcppt.log
\ingroup fcpptmain
\brief Logging classes and functions

<b>Link to <code>${fcppt_log_TARGET}</code>,
or to <code>fcppt_log_interface</code> if you only need the headers.</b>

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref log_introduction</li>
		<ul>
			<li>\ref log_simple_example</li>
		</ul>
	<li>\ref log_formatting_and_sinks</li>
		<ul>
			<li>\ref log_formatting_design</li>
			<li>\ref log_formatting_example</li>
		</ul>
	<li>\ref log_hierarchy</li>
		<ul>
			<li>\ref log_hierarchy_design</li>
			<li>\ref log_hierarchy_example</li>
		</ul>
	<li>\ref log_threads</li>
	<li>\ref log_headers</li>
</ul>

</td>
</tr>
</table>

\section log_introduction Introduction

The following list highlights the main features of fcppt's logging library:

<dl>
<dt>Configuration of enabled output:</dt>

<dd>The library assigns <em>log levels</em> to <em>log locations</em>, which is
stored by a <em>log context</em>. Log levels are, for example, <code>debug,
warning, error</code> and log locations are lists of strings.
</dd>

<dt>Formatting and direction of messages:</dt>

<dd>A <em>log context</em> also assigns to each <em>log level</em> a <em>level
stream</em>, which dictates where to log to, e.g. to <code>std::clog</code>,
and how messages are formatted.
</dd>

</dl>

\subsection log_simple_example A simple example

The class that does actual logging is called \link fcppt::log::object\endlink. It
refers to an \link fcppt::log::location\endlink in a \link fcppt::log::context\endlink.
The following example illustrates the use of a simple log object:

\snippet log/helloworld.cpp helloworld

Logging is done via the \link fcppt::log::object::log \endlink element
function. The macro \link FCPPT_LOG_DEBUG\endlink is a short-hand for logging
only if the debug log level is enabled. This is important because the
construction of the log message is avoided altogether when debug is not
enabled.

\link fcppt::log::_ \endlink is an object that basically acts like
a <code>std::basic_ostream</code>. This is used to
create a whole message in a thread-safe manner. If you log in multiple pieces
instead, the log message might end up interleaved with other messages.

\section log_formatting_and_sinks Formatting and sinks

\subsection log_formatting_design Formatting design

Here is a more detailed explanation of how log messages are formatted and where
they are written to:

<ul>
<li>
A log context contains an \link fcppt::log::level_stream\endlink for every
log level. Each of them controls where output is written to and how it is
formatted.
</li>
<li>
Each level stream uses an <code>std::basic_ostream</code> as its log
destination. Where output actually ends up is decided by its streambuf.
</li>
<li>
Formatting is done through \link fcppt::log::format::function \endlink objects
which can be naturally chained together. Every log object and every level stream
can have their own formatters.
</ul>

\subsection log_formatting_example Formatting and sinks example

In the following example, we are going to give our log object a special
formatting function that prints <code>This is a formatting test: </code> in
front of every log message.

Such a formatting function takes a string and returns a string and can be
implemented as follows:

\snippet log/formatting.cpp logger_formatter_declaration

We are also going to create another formatting function for the <em>error</em>
level stream that logs to \link fcppt::io::cerr\endlink.

\snippet log/formatting.cpp error_formatter_declaration

We then create the level streams, such that the <code>error</code> level logs
to \link fcppt::io::cerr\endlink using the error function we just created.
Every other level logs to \link fcppt::io::cout\endlink using the default
formatting function.

\snippet log/formatting.cpp logger_streams

The log context we are going to use again has the debug level and every level
above enabled. Instead of \link fcppt::log::default_level_streams\endlink we
give it the level streams we just created.

\snippet log/formatting.cpp logger_context

Finally, we create the log object that uses the aforementioned formatting
function:

\snippet log/formatting.cpp logger_declaration

The following code shows what is printed:

\snippet log/formatting.cpp log_print

\section log_hierarchy Log hierarchy

Controlling at runtime which messages are logged is very important. Under
normal circumstances, you probably want to only log serious problems, while in
a debug scenario a lot of debug messages should be logged.

\subsection log_hierarchy_design Log hierarchy design

A location is a list of <code>fcppt::log::name</code> values, e.g.
<code>{"my_lib", "my_subsystem"}</code>.
An \link fcppt::log::context \endlink associates locations with
\link fcppt::log::optional_level\endlink values. These can be configured through
the \link fcppt::log::context::set\endlink function, even before any log objects
are created. This is useful, for example, for specifying log levels on the
command line.

Each log object refers to a location of a given context.
In its constructor, it gets a name, and in addition to that, it gets either
<ul>
<li>a log context, in which case its location is its name,</li>
<li>a log context and a location, in which case its location is the given location plus its name, or</li>
<li>a parent log object, in which case its location is the parent's location plus its own name.</li>
</ul>

\subsection log_hierarchy_example Log hierarchy example

The next example shows how log objects, contexts and locations can be used
together.

The log context gets a single \link fcppt::log::optional_level\endlink as its
parameter, which is used as a default for every location, unless changed.

\snippet log/context.cpp declare_context

We declare a root object with name <code>"root"</code>. Its location will be
<code>{"root"}</code>.

\snippet log/context.cpp declare_root_logger

The child object gets the name <code>"child"</code> and the root object passed
to its constructor, thus its location is <code>{"root", "child"}</code>.

\snippet log/context.cpp declare_child_logger

As mentioned earlier, the locations inherit the root level of the context, so
every log object currently has the debug level and all levels above enabled: The
log location given to a log object implicitly changes how its output is formatted:

\snippet log/context.cpp log_debug

The first statement will print <code>root: warning: Print from root.</code> and
the second statement will print <code>root: child: warning: Print from
child.</code>

The \link fcppt::log::context::set\endlink function can be used to change the
level of a location at runtime.

\snippet log/context.cpp context_set

Here we change the child location to only have the warning level and every
level above enabled, so the following output is not printed:

\snippet log/context.cpp log_info

Note that changing the level at a location also changes the levels below
it. We can change the root level back to debug which will also affect the child
level:

\snippet log/context.cpp context_set2

Passing an empty optional log level disables all levels.

\section log_threads Thread safety

The log context contains a mutex to protect its internal structure from race conditions.
Therefore, calling element functions of a log context from multiple threads is safe.
Log objects can be used in different threads than the log context. However, sharing
a log object between different threads is not safe.

\section log_headers Header files
All headers are relative to the log subdirectory.

\subsection log_headers_essential Essential header files
<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>_.hpp</code></td>
<td>Contains \link fcppt::log::_ \endlink.</td>
</tr>
<tr>
<td><code>context_fwd.hpp</code></td>
<td>Contains \link fcppt::log::context \endlink's declaration.</td>
</tr>
<tr>
<td><code>context.hpp</code></td>
<td>Contains \link fcppt::log::context \endlink's definition.</td>
</tr>
<tr>
<td><code>debug.hpp</code></td>
<td>Contains the \link FCPPT_LOG_DEBUG\endlink macro.</td>
</tr>
<tr>
<td><code>error.hpp</code></td>
<td>Contains the \link FCPPT_LOG_ERROR\endlink macro.</td>
</tr>
<tr>
<td><code>fatal.hpp</code></td>
<td>Contains the \link FCPPT_LOG_FATAL\endlink macro.</td>
</tr>
<tr>
<td><code>info.hpp</code></td>
<td>Contains the \link FCPPT_LOG_INFO\endlink macro.</td>
</tr>
<tr>
<td><code>level.hpp</code></td>
<td>Contains the \link fcppt::log::level \endlink enumeration.</td>
</tr>
<tr>
<td><code>location_fwd.hpp</code></td>
<td>Contains \link fcppt::log::location \endlink's declaration.</td>
</tr>
<tr>
<td><code>location.hpp</code></td>
<td>Contains \link fcppt::log::location \endlink's definition.</td>
</tr>
<tr>
<td><code>name_fwd.hpp</code></td>
<td>Contains <code>fcppt::log::name</code>'s declaration.</td>
</tr>
<tr>
<td><code>name.hpp</code></td>
<td>Contains <code>fcppt::log::name</code>'s definition.</td>
</tr>
<tr>
<td><code>object_fwd.hpp</code></td>
<td>Contains \link fcppt::log::object \endlink's declaration.</td>
</tr>
<tr>
<td><code>object.hpp</code></td>
<td>Contains \link fcppt::log::object \endlink's defintiion.</td>
</tr>
<tr>
<td><code>parameters_fwd.hpp</code></td>
<td>Contains \link fcppt::log::parameters \endlink's declaration.</td>
</tr>
<tr>
<td><code>parameters.hpp</code></td>
<td>Contains \link fcppt::log::parameters \endlink's definition.</td>
</tr>
<tr>
<td><code>verbose.hpp</code></td>
<td>Contains the \link FCPPT_LOG_VERBOSE\endlink macro.</td>
</tr>
<tr>
<td><code>warning.hpp</code></td>
<td>Contains the \link FCPPT_LOG_WARNING\endlink macro.</td>
</tr>
</table>

\subsection log_headers_helpers Other header files

<table>
<tr>
<th>Header file</th>
<th>Description</th>
</tr>
<tr>
<td><code>default_level_streams.hpp</code></td>
<td>Contains \link fcppt::log::default_level_streams \endlink for construction of all level stream defaults.</td>
</tr>
<tr>
<td><code>default_stream.hpp</code></td>
<td>Contains the \link fcppt::log::default_stream \endlink function.</td>
</tr>
<tr>
<td><code>level_from_string.hpp</code></td>
<td>Contains \link fcppt::log::level_from_string \endlink.</td>
</tr>
<tr>
<td><code>level_stream_array.hpp</code></td>
<td>Contains the \link fcppt::log::level_stream_array \endlink typedef.</td>
</tr>
<tr>
<td><code>level_stream_fwd.hpp</code></td>
<td>Contains \link fcppt::log::level_stream \endlink's declaration.</td>
</tr>
<tr>
<td><code>level_stream.hpp</code></td>
<td>Contains \link fcppt::log::level_stream \endlink's definition.</td>
</tr>
<tr>
<td><code>level_to_string.hpp</code></td>
<td>Contains \link fcppt::log::level_to_string \endlink.</td>
</tr>
<tr>
<td><code>optional_level_fwd.hpp</code></td>
<td>Contains the \link fcppt::log::optional_level \endlink typedef.</td>
</tr>
<tr>
<td><code>optional_level.hpp</code></td>
<td>Includes <code>optional_level_fwd.hpp</code> and optional headers.</td>
</tr>
<tr>
<td><code>format/chain.hpp</code></td>
<td>Contains the \link fcppt::log::format::chain \endlink function.</td>
</tr>
<tr>
<td><code>format/default_level.hpp</code></td>
<td>Contains the \link fcppt::log::format::default_level \endlink function.</td>
</tr>
<tr>
<td><code>format/format.hpp</code></td>
<td>Includes all headers of <code>log/format</code>.</td>
</tr>
<tr>
<td><code>format/function_fwd.hpp</code></td>
<td>Contains the \link fcppt::log::format::function \endlink typedef.</td>
</tr>
<tr>
<td><code>format/function.hpp</code></td>
<td>Includes <code>format/function_fwd.hpp</code> and function headers.</td>
</tr>
<tr>
<td><code>format/inserter.hpp</code></td>
<td>Contains the \link fcppt::log::format::inserter \endlink typedef.</td>
</tr>
<tr>
<td><code>format/prefix.hpp</code></td>
<td>Contains the \link fcppt::log::format::prefix \endlink function.</td>
</tr>
<tr>
<td><code>format/time_stamp.hpp</code></td>
<td>Contains the \link fcppt::log::format::time_stamp \endlink typedef.</td>
</tr>
</table>

*/

namespace fcppt
{
/**
\brief Logging classes and functions
*/
namespace log
{
/**
\brief Functions and classes related to log formatting
*/
namespace format
{
}

}
}
