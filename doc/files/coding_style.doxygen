/**
\page code_style Coding style

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref coding_types
		<ul>
			<li>\ref coding_using_enums</li>
			<li>\ref coding_const</li>
		</ul>
	</li>
	<li>\ref coding_file_separation</li>
	<li>\ref coding_identifiers</li>
	<li>\ref coding_indentation
		<ul>
			<li>\ref coding_tabs</li>
			<li>\ref coding_when_to_indent</li>
		</ul>
	</li>
	<li>\ref coding_code_partitioning
		<ul>
			<li>\ref coding_file_extension</li>
			<li>\ref coding_namespaces_and_directories</li>
			<li>\ref coding_atomic_headers</li>
			<li>\ref coding_minimal_includes</li>
			<li>\ref coding_include_guards</li>
		</ul>
	</li>
	<li>\ref coding_numerical_considerations
		<ul>
			<li>\ref coding_float_double_long_double</li>
			<li>\ref coding_integral_types</li>
		</ul>
	</li>
</ul>

</td>
</tr>
</table>

\section coding_types Types

\subsection coding_using_enums Using enums

C++03 enums have a lot of disadvantages like injecting their enumerators in the
enclosing namespace and implicitly converting to other integral types.
Therefore, we only use the new C++11 enum classes (strongly types enums).

\subsection coding_const Using const

We declare as many variables const as possible. This helps to reason about the
code flow by knowing what values can change. In particular, function arguments
should be const whenever possible:

\code
void f(T); // no const at the declaration which makes no sense

void f(T const _arg)
{
  // _arg can't change here
}
\endcode

Making class members const is also often a good idea. The only problem with
this is that a class with const members won't be assignable.

\code
class foo
{
  T const bar;
};
\endcode

Consider using FCPPT_NONASSIGNABLE in this case.

Making return types of functions const can prevent erroneous code that tries to
modify the returned value.

\code
struct foo
{
};

foo f();

f() = foo();
\endcode

This actually compiles, although <code>foo</code> returns a prvalue. prvalues
of class type can still be modified by calling member functions (like
<code>operator=</code>) on them. In this case, it would probably (see below) a
good idea to change the declaration to <code>foo const f();</code>

However, making return types of functions const can have disadvantages:

<ul>

<li>If the return type is fundamental (e.g. <code>int</code>), const won't do
anything, and most compilers will generate a warning. If the return type is a
template parameter, this can be a problem.</li>

<li>A const return type prevents moving. For example, <code>std::vector<T>
const foo();</code> will call the copy constructor of vector when the function
is called.</li>

\section coding_file_separation File separation

Every function, typedef or class resides in its own header file. So, for
example, if you want to use fcppt::to_std_string (which is a function) you have
to <code>\verbatim #include <fcppt/to_std_string.hpp>\endverbatim</code>

All classes have an additional fwd header, which only provides a declaration of
the class. For example, <code><fcppt/type_info_fwd.hpp></code> provides the
declaration of fcppt::type_info and <code><fcppt/type_info.hpp></code> provides
the definition.

Template classes are split into three files. In addition to the
<code>_fwd</code> header there is a <code>_decl</code> header providing only
the class definition, as well as an <code>_impl</code> header providing the
method definitions. There is also a header with no suffix which includes the
three aforementioned headers. For example, the
fcppt::container::bitfield::object class consists of the following files:

<ul>
<li>
	<code>
		fcppt/container/bitfield/object_fwd.hpp
	</code>
</li>
<li>
	<code>
		fcppt/container/bitfield/object_decl.hpp
	</code>
</li>
<li>
	<code>
		fcppt/container/bitfield/object_impl.hpp
	</code>
</li>
<li>
	<code>
		fcppt/container/bitfield/object.hpp
	</code>
</li>
</ul>

Using these separate headers might improve compile time, which is known to be a
problem for more complex template classes. You can, of course, just use the
non-suffixed header (<code>object.hpp</code> in the example above) if you're not
concerned with compilation times.

\attention
If you forget to include the <code>_impl</code> header where the implementation
of a template is needed, you will get undefined references when linking.

\section coding_identifiers Identifiers

We use the same naming scheme as the C++ standard library. This means no camel
case, but all lowercase letters and underscores as separators
(<code>foo_bar_baz()</code> instead of <code>fooBarBaz()</code>). This way,
code which is mixed with boost and the standard library looks much more
consistent.

Macro names are <code>CAPTIALIZED</code> so they're not confused with normal
functions.

\note
The C standard library's <code>assert</code> function is a source for confusion
in this respect. You're not the only one if you tried to use it as:
\code
std::assert(0 < 1);
\endcode
Macros have no namespace scope.

\section coding_indentation Indentation

\subsection coding_tabs Tabs

We consistently use tabs instead of whitespaces for indentation. If you're
interested, here's why we do that:

Most coding guidelines just dismiss the tab issue by stating that you should
just use 'n' whitespaces for indentation. The problem with this is: What are
sensible values for 'n'? For example, vim's standard tab width is 8. But if you
use a small terminal, you might run out of space if you, for example, nest 3
<code>if</code> statements inside a function. So the code looks ugly on some
machines.

This is where tabs come in handy. They allow for a variable 'n', depending on
what you specify in your text editor. But there are pitfalls. For example,
consider your tab width is 4:

\code
int a = 3,
    b = 4;
\endcode

You (or your automatically refactoring editor) might be tempted to write this
as:

\code
int a = 3,
\tb = 4;
\endcode

Which — with <em>n</em>=4 — <em>looks</em> the same. But the problem with this
is obvious, if you set your tab width to 8, it looks like this:

\code
int a = 3,
        b = 4;
\endcode

It's broken. There are two ways to prevent his: You could use whitespaces in
this situation, which would work <em>if</em> you have a monospace font (which,
of course, most people do use when programming). If you don't, the following
happens:

int a = 3,<br>
&nbsp;&nbsp;&nbsp;&nbsp;b = 4;

The second solution is to indent it like this

\code
int
\ta=3,
\tb=4;
\endcode

Which is tab-safe and doesn't look too ugly, so that's what we're doing.

\subsection coding_when_to_indent When to indent

When to indent is pretty much left to the individual programmer. Specifying
more than a few encouragements would be pretty harsh. A rule of thumb for us is
"indent as much as possible", which can be best explained by an example:

\code
template<
    typename T,
    typename U
>
T
cast_stuff(
    U const &a,
    U const &b)
{
    run_other_function
    (
        run_yet_another_function
        (
            static_cast
            <
                T
            >
            (
                a
            );
        )
    );
}
\endcode

This, at first glance, might look pretty odd to you, but it is something you
might encounter when reading fcppt code. This method of indentation is a bit
extreme, but it is consistent: We insert a newline after every opening brace
(curly brace, parentheses, whatever).

\section coding_code_partitioning Code partitioning

\subsection coding_file_extension File extension

Many people use ".h" for their C++ header files. We encourage using ".hpp"
because that way your favorite editor can deduce that you're writing C++ code
and change, for example, the syntax highlighting accordingly.

\subsection coding_namespaces_and_directories Namespaces and directories

To avoid filename clashes we let the file system hierarchy follow the namespace
hierarchy. So a namespace creates a new directory - with nesting of directories
of course.

\subsection coding_atomic_headers Atomic headers

We encourage writing header files which contain only one "entity", so one
typedef, one class, one constant only. This way, it's very easy to memorize
which file you have to include to get a specific entity (for
<code>foo::bar::baz</code> you need <code>foo/bar/baz.hpp</code>, see
\ref coding_namespaces_and_directories above).

\subsection coding_minimal_includes Minimal includes

A header should only include what it needs so it can be included without
causing errors by itself (this means it should produce no errors when compiling
it with <code>-fsyntax-only</code>). If code from the header is used, however,
additional includes may be needed.

The main reason for this is that for function declarations, the argument and
return types can be incomplete, as shown in the following example:

\code
#include <mylib/arg1_fwd.hpp>
#include <mylib/arg2_fwd.hpp>
#include <mylib/ret1_fwd.hpp>
#include <mylib/ret2_fwd.hpp>

struct mine
{
  mylib::ret1 foo1(mylib::arg1);
  mylib::ret2 foo2(mylib::arg2);
};
\endcode

Depending on whether the user of <code>mine</code> intends to use
<code>foo1</code> or <code>foo2</code>, they need to include the corresponding
headers that provide the definitions of the argument and return types. A class
like <code>mine</code> could be a huge interface of which a user might only use
a small portion, so only declaring the argument and return types usually helps
to reduce the number of includes needed.

\subsection coding_include_guards Include guards

It's extremely important for include guards to be unique. If they're not, you
end up in a long debugging session to find missing declarations or even
undefined references.

So we devised a simple scheme for the names: We use the complete namespace
hierarchy plus the suffix <code>_HPP_INCLUDED</code>, so consider this file:

\code
namespace sge
{
namespace gui
{
namespace buttons
{
class text
{
    ...
};
}
}
}
\endcode

The corresponding include guard would be:
<code>SGE_GUI_BUTTONS_TEXT_HPP_INCLUDED</code>.  This way, sensible behavior is
guaranteed. This, of course, requires that header files are quite atomic (see
\ref coding_atomic_headers above). If headers aren't really atomic, use the
(converted) file name as the include guard.

\section coding_numerical_considerations Numerical considerations

\subsection coding_float_double_long_double float/double/long double

The C++ standard states that basically all operations regarding floats are
implementation defined. This might lead to a "fatal error" in the following
code:

\code
float f = 1.0f;
if (f == 1.0f)
  do_something_safe();
else
  cause_fatal_error();
\endcode

float comparison is not only implementation defined, it's pretty "blurry" in
most implementations. How to properly compare floats really depends on the
situation. Sometimes you might want to test the relative error, sometimes the
absolute error. In any case, comparing floats directly is almost always wrong.

\subsection coding_integral_types Integral types

The use of the signed types is discouraged. Of course, sometimes you need to
use them to get negative numbers, but the signed types have a distinct
disadvantage: Some operations are undefined or implementation defined.

For example, the behavior of the % operator is partially implementation
defined. Also, the value of <code>INT_MAX+1</code> is undefined, so you cannot
use ints to "wrap around" the borders. The unsigned types have such guarantees,
so use them if you really do not need negative numbers.
*/
