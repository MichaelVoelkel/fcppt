/**
\page code_style Coding style

<table id="toc">
<tr>
<td>

<ul>
	<li>\ref coding_introduction
	<li>\ref coding_semantics</li>
		<ul>
			<li>\ref coding_typing</li>
			<li>\ref coding_total</li>
			<li>\ref coding_loops</li>
			<li>\ref coding_const_init</li>
		</ul>
	<li>\ref coding_asthetic</li>
		<ul>
			<li>\ref coding_indentation</li>
			<li>\ref coding_naming</li>
			<li>\ref coding_partitioning</li>
		</ul>
</ul>

</td>
</tr>
</table>

\section coding_introduction Introduction

The notion of coding style used in the following section roughly consists of
two different aspects:
<ul>
<li>\link coding_asthetic Asthetic aspects\endlink, including how code is
indented, partitioned into files, identifiers are named, and so on.</li>
<li>How semantics are expressed, including typing, usage of language constructs
like loops, <code>const</code>, ownership, and so on.</li>
</ul>
In general, coding styles are somewhat arbitrary which is why this document
tries to give a rationale for every one of them.

\section coding_semantics Semantic aspects

Besides asthetic aspects, semantic aspects describe \em how semantics are
expressed. The most important goal is to avoid mistakes, or more precisely, how
choosing types and expressions carefully can narrow down the set of mistakes
one can make. Typing, total functions, ranges, avoiding raw loops and
making variables const all tie together in this respect.

\subsection coding_typing Typing

A (mostly) statically typed language like C++ has the advantage to forbid
programs to even run if they are not well typed. Making the most out of the type
system can catch a lot of mistakes at compile-time. We can use types to
<ul>
<li>Express ownership: Choose between <code>fcppt::unique_ptr<T></code>, <code>
fcppt::shared_ptr<T></code>, <code>fcppt::reference_wrapper<T></code>,
<code>T &&</code> and <code>T</code>.
<ul>
<li>\link fcppt::unique_ptr\endlink expresses unique ownership and should be
the default class to use for non-copyable objects.</li>
<li>\link fcppt::shared_ptr\endlink expresses shared ownership.</li>
<li>\link fcppt::reference_wrapper\endlink should be prefered to raw references
to make their use more explicit.</li>
</ul>
<li>Express optional values: Can a function take or, more importantly, return
no value? Use <code>fcppt::optional<T></code> in this case. Instead of <code>T *</code>,
use <code>%fcppt::optional<T &></code>. See \ref fcpptoptional.</li>
<li>Express values that can be of either type: Use
<code>%fcppt::variant::variadic<T1,T2></code> to express that
a value can either be of type <code>T1</code> or of type <code>T2</code>.
See \ref fcpptvariant.</li>
<li>Wrap types as <em>strong typedefs</em>, e.g.
<code>%FCPPT_MAKE_STRONG_TYPEDEF(std::string,email_address)</code> to make their
use clearer. See \ref fcpptstrongtypedef.</li>
</ul>

\subsection coding_total Total functions

A total function is a function that is well-defined for every possible
combination of parameters. A partial function on the other hand can be
undefined for some. This includes everything that is not expressed by the type
system: undefined behavior, aborting the program or even throwing an exception.
An example of a partial function is dereferencing a pointer. The pointer might
be a null pointer, it might be uninitialized or it might point to 'one past the
end'. Calling partial functions is error-prone because the programmer has to
remember which parameters make the function terminate abnormally. Consequently,
partial functions are best avoided but cannot always be:
<ul>
<li>Prefer to use \ref fcpptoptional as a return type in case a function may
not return anything. See \link fcppt::container::maybe_back\endlink for an
example, which returns an empty optional in case a container is empty. This
usually makes a function total.</li>
<li>Throw exceptions in case resource allocation fails.</li>
<li>Only abort the program or leave a case as undefined behavior as a last
resort.</li>
</ul>
See \ref fcpptassert on how to systematically handle partial
functions.

\subsection coding_loops Loops

Loops can be broken down into two separate concerns: Updating the loop
condition and updating the loop's result. For example, a loop that sums integers
from <code>1</code> to <code>n-1</code> can be written as:

\snippet coding_style.cpp coding_style_loop

Here, updating the loop condition is done by incrementing <code>i</code> and
updating the result by <code>result += i</code>. Instead of the loop condition
we can use \link fcppt::int_range\endlink. Updating the loop's result can be
decoupled from the loop itself using an algorithm, in this case \link
fcppt::algorithm::fold\endlink.

\snippet coding_style.cpp coding_style_fold

Unlike iterators, ranges have the great advantage of being composable, for
example two ranges can be joined (taking their product) or appended, which is
implemented by the <a
href="http://www.boost.org/doc/libs/1_59_0/libs/range/doc/html/index.html">Boost.Range</a>
library.
For a collection of algorithms that replace loops see \ref fcpptalgorithm.
Because imperative loops, especially ones using iterators, are so error-prone,
raw loops are best avoided

\subsection coding_const_init Const and initialization

Declaring an object <code>const</code> makes it immutable and therefore easier
to reason about. Obviously, a const object has to be initialized directly which
can sometimes be hard to express. Consider an array of arbitrary size in a template:

\snippet coding_style.cpp coding_style_make_array

This case is handled by \link fcppt::algorithm::array_init\endlink, for example:

\snippet coding_style.cpp coding_style_array_fold

Another common case is container initialization which usually consists of a
series of <code>push_back</code> or <code>insert</code> operations. This is
handled by \link fcppt::algorithm::map\endlink.

Initialization also brings up the point of default constructors, which for
historical reasons all fundamental types have. Instead of <code>int
i{0};</code> the default constructor <code>int i{};</code> can be used. This is
like pulling a value out of thin air and makes code less readable.

Default constructors become worse when classes are more complex.
<ul>
<li>They can make the representation of a class more complicated, for example
<code>%std::function</code> initializes to an empty function that throws an
exception when called. Another example are singular iterators that have to
distinguish between pointing to a sequence and pointing to nothing.</li>
<li>They can lead to very obscure behavior to get a default-constructed value,
for example <code>%boost::variant</code> default constructs an object of its
first type.</li>
<li>They can have undesired effects like constructing a null
<code>std::unique_ptr</code>.</li>
</ul>
Alternatives to the classes mentioned above are \link
fcppt::unique_ptr\endlink, \link fcppt::function\endlink and \link
fcppt::variant::object\endlink, which do not provide default constructors.
*/
