[section Container]

[section Tree]

[section Synopsis]

[import ../include/fcppt/container/tree/object_decl.hpp]
[tree]

[endsect]

[section Rationale]

An `fcppt::container::tree::object<T>` is a container modeling an n-ary tree holding objects of type `T`. It has a /value/ of type `T` and /children/ of type `fcppt::container::tree::object<T>`. [note Because of the inherent recursive property of the tree, it has to store its children in a boost::ptr_container which might make tree a bit heavy to include. Consider using forward declarations where possible: `#include <fcppt/container/tree/object_fwd.hpp>`]

It tries to mimic the sequence and set container from the standard library. Also, its implementation is minimal in the sense that everything but trivial operations are outsourced to external headers - the traversal iterators below are an example of this. Most of the operations are self-explanatory. Here is a small example of the tree:

[import ../examples/tree_simple.cpp]
[tree_simple]

Note also that all operations which implicitly depend on a parent being present are undefined if `has_parent()` returns false. The same goes for all operations which depend on at least one child being present and `empty()` returning true.

[endsect]

[section Iterators/Traversals]

The tree uses a `boost::ptr_list` to store its children, so the iterator guarantees are the same as with this container (see [@http://www.boost.org/doc/libs/release/libs/ptr_container/doc/ptr_list.html here]). Apart from using the traditional iteration methods -- using `begin(), end(), rbegin(), rend()` -- there are external traversal classes. Those are best explained using a little example:

[import ../examples/tree_traversal.cpp]
[tree_traversal]

This will output 

``
qux
foo
bar
baz
qux
hello
``

[endsect]

[endsect]

[endsect]
